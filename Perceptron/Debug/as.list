
as.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003990  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08003b20  08003b20  00013b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c68  08003c68  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003c68  08003c68  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c68  08003c68  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c68  08003c68  00013c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c6c  08003c6c  00013c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003c70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000338  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003a0  200003a0  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008491  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016ec  00000000  00000000  00028529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000718  00000000  00000000  00029c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000660  00000000  00000000  0002a330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003f9c  00000000  00000000  0002a990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000088d0  00000000  00000000  0002e92c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc669  00000000  00000000  000371fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00113865  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002828  00000000  00000000  001138b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  001160e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000004e  00000000  00000000  00116104  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003b08 	.word	0x08003b08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08003b08 	.word	0x08003b08

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__gedf2>:
 800083c:	f04f 3cff 	mov.w	ip, #4294967295
 8000840:	e006      	b.n	8000850 <__cmpdf2+0x4>
 8000842:	bf00      	nop

08000844 <__ledf2>:
 8000844:	f04f 0c01 	mov.w	ip, #1
 8000848:	e002      	b.n	8000850 <__cmpdf2+0x4>
 800084a:	bf00      	nop

0800084c <__cmpdf2>:
 800084c:	f04f 0c01 	mov.w	ip, #1
 8000850:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000854:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000858:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800085c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000860:	bf18      	it	ne
 8000862:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000866:	d01b      	beq.n	80008a0 <__cmpdf2+0x54>
 8000868:	b001      	add	sp, #4
 800086a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800086e:	bf0c      	ite	eq
 8000870:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000874:	ea91 0f03 	teqne	r1, r3
 8000878:	bf02      	ittt	eq
 800087a:	ea90 0f02 	teqeq	r0, r2
 800087e:	2000      	moveq	r0, #0
 8000880:	4770      	bxeq	lr
 8000882:	f110 0f00 	cmn.w	r0, #0
 8000886:	ea91 0f03 	teq	r1, r3
 800088a:	bf58      	it	pl
 800088c:	4299      	cmppl	r1, r3
 800088e:	bf08      	it	eq
 8000890:	4290      	cmpeq	r0, r2
 8000892:	bf2c      	ite	cs
 8000894:	17d8      	asrcs	r0, r3, #31
 8000896:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800089a:	f040 0001 	orr.w	r0, r0, #1
 800089e:	4770      	bx	lr
 80008a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008a8:	d102      	bne.n	80008b0 <__cmpdf2+0x64>
 80008aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008ae:	d107      	bne.n	80008c0 <__cmpdf2+0x74>
 80008b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008b8:	d1d6      	bne.n	8000868 <__cmpdf2+0x1c>
 80008ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008be:	d0d3      	beq.n	8000868 <__cmpdf2+0x1c>
 80008c0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop

080008c8 <__aeabi_cdrcmple>:
 80008c8:	4684      	mov	ip, r0
 80008ca:	4610      	mov	r0, r2
 80008cc:	4662      	mov	r2, ip
 80008ce:	468c      	mov	ip, r1
 80008d0:	4619      	mov	r1, r3
 80008d2:	4663      	mov	r3, ip
 80008d4:	e000      	b.n	80008d8 <__aeabi_cdcmpeq>
 80008d6:	bf00      	nop

080008d8 <__aeabi_cdcmpeq>:
 80008d8:	b501      	push	{r0, lr}
 80008da:	f7ff ffb7 	bl	800084c <__cmpdf2>
 80008de:	2800      	cmp	r0, #0
 80008e0:	bf48      	it	mi
 80008e2:	f110 0f00 	cmnmi.w	r0, #0
 80008e6:	bd01      	pop	{r0, pc}

080008e8 <__aeabi_dcmpeq>:
 80008e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008ec:	f7ff fff4 	bl	80008d8 <__aeabi_cdcmpeq>
 80008f0:	bf0c      	ite	eq
 80008f2:	2001      	moveq	r0, #1
 80008f4:	2000      	movne	r0, #0
 80008f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008fa:	bf00      	nop

080008fc <__aeabi_dcmplt>:
 80008fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000900:	f7ff ffea 	bl	80008d8 <__aeabi_cdcmpeq>
 8000904:	bf34      	ite	cc
 8000906:	2001      	movcc	r0, #1
 8000908:	2000      	movcs	r0, #0
 800090a:	f85d fb08 	ldr.w	pc, [sp], #8
 800090e:	bf00      	nop

08000910 <__aeabi_dcmple>:
 8000910:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000914:	f7ff ffe0 	bl	80008d8 <__aeabi_cdcmpeq>
 8000918:	bf94      	ite	ls
 800091a:	2001      	movls	r0, #1
 800091c:	2000      	movhi	r0, #0
 800091e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000922:	bf00      	nop

08000924 <__aeabi_dcmpge>:
 8000924:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000928:	f7ff ffce 	bl	80008c8 <__aeabi_cdrcmple>
 800092c:	bf94      	ite	ls
 800092e:	2001      	movls	r0, #1
 8000930:	2000      	movhi	r0, #0
 8000932:	f85d fb08 	ldr.w	pc, [sp], #8
 8000936:	bf00      	nop

08000938 <__aeabi_dcmpgt>:
 8000938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800093c:	f7ff ffc4 	bl	80008c8 <__aeabi_cdrcmple>
 8000940:	bf34      	ite	cc
 8000942:	2001      	movcc	r0, #1
 8000944:	2000      	movcs	r0, #0
 8000946:	f85d fb08 	ldr.w	pc, [sp], #8
 800094a:	bf00      	nop

0800094c <guess>:
    int Ninput;
    double *weights;
    double threshold;
} Perceptron;

double guess(Perceptron p, double *input) {
 800094c:	b590      	push	{r4, r7, lr}
 800094e:	b089      	sub	sp, #36	; 0x24
 8000950:	af00      	add	r7, sp, #0
 8000952:	463c      	mov	r4, r7
 8000954:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    double res = 0.0;
 8000958:	f04f 0200 	mov.w	r2, #0
 800095c:	f04f 0300 	mov.w	r3, #0
 8000960:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < p.Ninput; i++) {
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]
 8000968:	e01a      	b.n	80009a0 <guess+0x54>
        res += p.weights[i] * input[i];
 800096a:	687a      	ldr	r2, [r7, #4]
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	00db      	lsls	r3, r3, #3
 8000970:	4413      	add	r3, r2
 8000972:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	00db      	lsls	r3, r3, #3
 800097a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800097c:	4413      	add	r3, r2
 800097e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000982:	f7ff fc75 	bl	8000270 <__aeabi_dmul>
 8000986:	4602      	mov	r2, r0
 8000988:	460b      	mov	r3, r1
 800098a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800098e:	f7ff fd9f 	bl	80004d0 <__adddf3>
 8000992:	4602      	mov	r2, r0
 8000994:	460b      	mov	r3, r1
 8000996:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < p.Ninput; i++) {
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	3301      	adds	r3, #1
 800099e:	617b      	str	r3, [r7, #20]
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	697a      	ldr	r2, [r7, #20]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	dbe0      	blt.n	800096a <guess+0x1e>
    }
    res += p.threshold;
 80009a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80009ac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80009b0:	f7ff fd8e 	bl	80004d0 <__adddf3>
 80009b4:	4602      	mov	r2, r0
 80009b6:	460b      	mov	r3, r1
 80009b8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    return (res >= 0) ? 1.0 : 0.0;
 80009bc:	f04f 0200 	mov.w	r2, #0
 80009c0:	f04f 0300 	mov.w	r3, #0
 80009c4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80009c8:	f7ff ffac 	bl	8000924 <__aeabi_dcmpge>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d003      	beq.n	80009da <guess+0x8e>
 80009d2:	f04f 0200 	mov.w	r2, #0
 80009d6:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <guess+0xa8>)
 80009d8:	e003      	b.n	80009e2 <guess+0x96>
 80009da:	f04f 0200 	mov.w	r2, #0
 80009de:	f04f 0300 	mov.w	r3, #0
 80009e2:	ec43 2b17 	vmov	d7, r2, r3
}
 80009e6:	eeb0 0a47 	vmov.f32	s0, s14
 80009ea:	eef0 0a67 	vmov.f32	s1, s15
 80009ee:	3724      	adds	r7, #36	; 0x24
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd90      	pop	{r4, r7, pc}
 80009f4:	3ff00000 	.word	0x3ff00000

080009f8 <result>:

double result(Perceptron *p, double eta, double truevalue, double *input) {
 80009f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009fa:	b08f      	sub	sp, #60	; 0x3c
 80009fc:	af02      	add	r7, sp, #8
 80009fe:	6178      	str	r0, [r7, #20]
 8000a00:	ed87 0b02 	vstr	d0, [r7, #8]
 8000a04:	ed87 1b00 	vstr	d1, [r7]
 8000a08:	6139      	str	r1, [r7, #16]
    double prediction = guess(*p, input);
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	9200      	str	r2, [sp, #0]
 8000a10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a12:	f7ff ff9b 	bl	800094c <guess>
 8000a16:	ed87 0b08 	vstr	d0, [r7, #32]
    double err = truevalue - prediction;
 8000a1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000a1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000a22:	f7ff fd53 	bl	80004cc <__aeabi_dsub>
 8000a26:	4602      	mov	r2, r0
 8000a28:	460b      	mov	r3, r1
 8000a2a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < p->Ninput; i++) {
 8000a2e:	2300      	movs	r3, #0
 8000a30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a32:	e02e      	b.n	8000a92 <result+0x9a>
        p->weights[i] += eta * err * input[i];
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	685a      	ldr	r2, [r3, #4]
 8000a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a3a:	00db      	lsls	r3, r3, #3
 8000a3c:	4413      	add	r3, r2
 8000a3e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000a42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000a46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000a4a:	f7ff fc11 	bl	8000270 <__aeabi_dmul>
 8000a4e:	4602      	mov	r2, r0
 8000a50:	460b      	mov	r3, r1
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a58:	00db      	lsls	r3, r3, #3
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a62:	f7ff fc05 	bl	8000270 <__aeabi_dmul>
 8000a66:	4602      	mov	r2, r0
 8000a68:	460b      	mov	r3, r1
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	685a      	ldr	r2, [r3, #4]
 8000a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a74:	00db      	lsls	r3, r3, #3
 8000a76:	18d6      	adds	r6, r2, r3
 8000a78:	4602      	mov	r2, r0
 8000a7a:	460b      	mov	r3, r1
 8000a7c:	4620      	mov	r0, r4
 8000a7e:	4629      	mov	r1, r5
 8000a80:	f7ff fd26 	bl	80004d0 <__adddf3>
 8000a84:	4602      	mov	r2, r0
 8000a86:	460b      	mov	r3, r1
 8000a88:	e9c6 2300 	strd	r2, r3, [r6]
    for (int i = 0; i < p->Ninput; i++) {
 8000a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a8e:	3301      	adds	r3, #1
 8000a90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	dbcb      	blt.n	8000a34 <result+0x3c>
    }
    p->threshold += eta * err;
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8000aa2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000aa6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000aaa:	f7ff fbe1 	bl	8000270 <__aeabi_dmul>
 8000aae:	4602      	mov	r2, r0
 8000ab0:	460b      	mov	r3, r1
 8000ab2:	4620      	mov	r0, r4
 8000ab4:	4629      	mov	r1, r5
 8000ab6:	f7ff fd0b 	bl	80004d0 <__adddf3>
 8000aba:	4602      	mov	r2, r0
 8000abc:	460b      	mov	r3, r1
 8000abe:	6979      	ldr	r1, [r7, #20]
 8000ac0:	e9c1 2302 	strd	r2, r3, [r1, #8]
    return err;
 8000ac4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000ac8:	ec43 2b17 	vmov	d7, r2, r3
}
 8000acc:	eeb0 0a47 	vmov.f32	s0, s14
 8000ad0:	eef0 0a67 	vmov.f32	s1, s15
 8000ad4:	3734      	adds	r7, #52	; 0x34
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000adc <generatePerceptron>:

void generatePerceptron(Perceptron *p, int size) {
 8000adc:	b590      	push	{r4, r7, lr}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	6039      	str	r1, [r7, #0]
    p->Ninput = size;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	683a      	ldr	r2, [r7, #0]
 8000aea:	601a      	str	r2, [r3, #0]
    p->weights = (double *)malloc(size * sizeof(double));
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	00db      	lsls	r3, r3, #3
 8000af0:	4618      	mov	r0, r3
 8000af2:	f001 ff67 	bl	80029c4 <malloc>
 8000af6:	4603      	mov	r3, r0
 8000af8:	461a      	mov	r2, r3
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	605a      	str	r2, [r3, #4]
    p->threshold = ((float)(rand() % 100)) / 100;
 8000afe:	f002 f87f 	bl	8002c00 <rand>
 8000b02:	4603      	mov	r3, r0
 8000b04:	4a25      	ldr	r2, [pc, #148]	; (8000b9c <generatePerceptron+0xc0>)
 8000b06:	fb82 1203 	smull	r1, r2, r2, r3
 8000b0a:	1151      	asrs	r1, r2, #5
 8000b0c:	17da      	asrs	r2, r3, #31
 8000b0e:	1a8a      	subs	r2, r1, r2
 8000b10:	2164      	movs	r1, #100	; 0x64
 8000b12:	fb01 f202 	mul.w	r2, r1, r2
 8000b16:	1a9a      	subs	r2, r3, r2
 8000b18:	ee07 2a90 	vmov	s15, r2
 8000b1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b20:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000ba0 <generatePerceptron+0xc4>
 8000b24:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000b28:	ee16 0a90 	vmov	r0, s13
 8000b2c:	f7ff fe2e 	bl	800078c <__aeabi_f2d>
 8000b30:	4602      	mov	r2, r0
 8000b32:	460b      	mov	r3, r1
 8000b34:	6879      	ldr	r1, [r7, #4]
 8000b36:	e9c1 2302 	strd	r2, r3, [r1, #8]
    for (int i = 0; i < size; i++) {
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	e024      	b.n	8000b8a <generatePerceptron+0xae>
        p->weights[i] = ((float)(rand() % 100)) / 100;
 8000b40:	f002 f85e 	bl	8002c00 <rand>
 8000b44:	4603      	mov	r3, r0
 8000b46:	4a15      	ldr	r2, [pc, #84]	; (8000b9c <generatePerceptron+0xc0>)
 8000b48:	fb82 1203 	smull	r1, r2, r2, r3
 8000b4c:	1151      	asrs	r1, r2, #5
 8000b4e:	17da      	asrs	r2, r3, #31
 8000b50:	1a8a      	subs	r2, r1, r2
 8000b52:	2164      	movs	r1, #100	; 0x64
 8000b54:	fb01 f202 	mul.w	r2, r1, r2
 8000b58:	1a9a      	subs	r2, r3, r2
 8000b5a:	ee07 2a90 	vmov	s15, r2
 8000b5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b62:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000ba0 <generatePerceptron+0xc4>
 8000b66:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	685a      	ldr	r2, [r3, #4]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	18d4      	adds	r4, r2, r3
 8000b74:	ee16 0a90 	vmov	r0, s13
 8000b78:	f7ff fe08 	bl	800078c <__aeabi_f2d>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	460b      	mov	r3, r1
 8000b80:	e9c4 2300 	strd	r2, r3, [r4]
    for (int i = 0; i < size; i++) {
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	3301      	adds	r3, #1
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fa      	ldr	r2, [r7, #12]
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	dbd6      	blt.n	8000b40 <generatePerceptron+0x64>
    }
}
 8000b92:	bf00      	nop
 8000b94:	bf00      	nop
 8000b96:	3714      	adds	r7, #20
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd90      	pop	{r4, r7, pc}
 8000b9c:	51eb851f 	.word	0x51eb851f
 8000ba0:	42c80000 	.word	0x42c80000
 8000ba4:	00000000 	.word	0x00000000

08000ba8 <main>:

int main(void) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08c      	sub	sp, #48	; 0x30
 8000bac:	af00      	add	r7, sp, #0
    srand(time(NULL));
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f002 f874 	bl	8002c9c <time>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	460b      	mov	r3, r1
 8000bb8:	4613      	mov	r3, r2
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f001 fff2 	bl	8002ba4 <srand>
    Perceptron A;
    generatePerceptron(&A, 2);
 8000bc0:	f107 0310 	add.w	r3, r7, #16
 8000bc4:	2102      	movs	r1, #2
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff ff88 	bl	8000adc <generatePerceptron>

    while (1) {
        double array[2];
        for (int i = 0; i < 2; i++) {
 8000bcc:	2300      	movs	r3, #0
 8000bce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000bd0:	e01b      	b.n	8000c0a <main+0x62>
            array[i] = rand() % 100;
 8000bd2:	f002 f815 	bl	8002c00 <rand>
 8000bd6:	4602      	mov	r2, r0
 8000bd8:	4b1f      	ldr	r3, [pc, #124]	; (8000c58 <main+0xb0>)
 8000bda:	fb83 1302 	smull	r1, r3, r3, r2
 8000bde:	1159      	asrs	r1, r3, #5
 8000be0:	17d3      	asrs	r3, r2, #31
 8000be2:	1acb      	subs	r3, r1, r3
 8000be4:	2164      	movs	r1, #100	; 0x64
 8000be6:	fb01 f303 	mul.w	r3, r1, r3
 8000bea:	1ad3      	subs	r3, r2, r3
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fdbb 	bl	8000768 <__aeabi_i2d>
 8000bf2:	4602      	mov	r2, r0
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000bf8:	00c9      	lsls	r1, r1, #3
 8000bfa:	3130      	adds	r1, #48	; 0x30
 8000bfc:	4439      	add	r1, r7
 8000bfe:	3930      	subs	r1, #48	; 0x30
 8000c00:	e9c1 2300 	strd	r2, r3, [r1]
        for (int i = 0; i < 2; i++) {
 8000c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c06:	3301      	adds	r3, #1
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	dde0      	ble.n	8000bd2 <main+0x2a>
        }
        double B = (array[0] != array[1]) ? 1 : 0;
 8000c10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000c14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000c18:	f7ff fe66 	bl	80008e8 <__aeabi_dcmpeq>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d103      	bne.n	8000c2a <main+0x82>
 8000c22:	f04f 0200 	mov.w	r2, #0
 8000c26:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <main+0xb4>)
 8000c28:	e003      	b.n	8000c32 <main+0x8a>
 8000c2a:	f04f 0200 	mov.w	r2, #0
 8000c2e:	f04f 0300 	mov.w	r3, #0
 8000c32:	e9c7 2308 	strd	r2, r3, [r7, #32]
        result(&A, 0.2, B, array);
 8000c36:	463a      	mov	r2, r7
 8000c38:	f107 0310 	add.w	r3, r7, #16
 8000c3c:	4611      	mov	r1, r2
 8000c3e:	ed97 1b08 	vldr	d1, [r7, #32]
 8000c42:	ed9f 0b03 	vldr	d0, [pc, #12]	; 8000c50 <main+0xa8>
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fed6 	bl	80009f8 <result>
    while (1) {
 8000c4c:	e7be      	b.n	8000bcc <main+0x24>
 8000c4e:	bf00      	nop
 8000c50:	9999999a 	.word	0x9999999a
 8000c54:	3fc99999 	.word	0x3fc99999
 8000c58:	51eb851f 	.word	0x51eb851f
 8000c5c:	3ff00000 	.word	0x3ff00000

08000c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <NMI_Handler+0x4>

08000c66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <HardFault_Handler+0x4>

08000c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <MemManage_Handler+0x4>

08000c72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <BusFault_Handler+0x4>

08000c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <UsageFault_Handler+0x4>

08000c7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cac:	f000 f90e 	bl	8000ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000cb8:	4802      	ldr	r0, [pc, #8]	; (8000cc4 <OTG_FS_IRQHandler+0x10>)
 8000cba:	f000 f91b 	bl	8000ef4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	2000008c 	.word	0x2000008c

08000cc8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  return 1;
 8000ccc:	2301      	movs	r3, #1
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <_kill>:

int _kill(int pid, int sig)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ce2:	f001 fe45 	bl	8002970 <__errno>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2216      	movs	r2, #22
 8000cea:	601a      	str	r2, [r3, #0]
  return -1;
 8000cec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <_exit>:

void _exit (int status)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d00:	f04f 31ff 	mov.w	r1, #4294967295
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff ffe7 	bl	8000cd8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d0a:	e7fe      	b.n	8000d0a <_exit+0x12>

08000d0c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
 8000d1c:	e00a      	b.n	8000d34 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d1e:	f3af 8000 	nop.w
 8000d22:	4601      	mov	r1, r0
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	1c5a      	adds	r2, r3, #1
 8000d28:	60ba      	str	r2, [r7, #8]
 8000d2a:	b2ca      	uxtb	r2, r1
 8000d2c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	3301      	adds	r3, #1
 8000d32:	617b      	str	r3, [r7, #20]
 8000d34:	697a      	ldr	r2, [r7, #20]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	dbf0      	blt.n	8000d1e <_read+0x12>
  }

  return len;
 8000d3c:	687b      	ldr	r3, [r7, #4]
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3718      	adds	r7, #24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b086      	sub	sp, #24
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	60f8      	str	r0, [r7, #12]
 8000d4e:	60b9      	str	r1, [r7, #8]
 8000d50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
 8000d56:	e009      	b.n	8000d6c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	1c5a      	adds	r2, r3, #1
 8000d5c:	60ba      	str	r2, [r7, #8]
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	697a      	ldr	r2, [r7, #20]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	dbf1      	blt.n	8000d58 <_write+0x12>
  }
  return len;
 8000d74:	687b      	ldr	r3, [r7, #4]
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3718      	adds	r7, #24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <_close>:

int _close(int file)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	b083      	sub	sp, #12
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b083      	sub	sp, #12
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
 8000d9e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000da6:	605a      	str	r2, [r3, #4]
  return 0;
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <_isatty>:

int _isatty(int file)
{
 8000db6:	b480      	push	{r7}
 8000db8:	b083      	sub	sp, #12
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dbe:	2301      	movs	r3, #1
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3714      	adds	r7, #20
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
	...

08000de8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df0:	4a14      	ldr	r2, [pc, #80]	; (8000e44 <_sbrk+0x5c>)
 8000df2:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <_sbrk+0x60>)
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dfc:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <_sbrk+0x64>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d102      	bne.n	8000e0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <_sbrk+0x64>)
 8000e06:	4a12      	ldr	r2, [pc, #72]	; (8000e50 <_sbrk+0x68>)
 8000e08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e0a:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <_sbrk+0x64>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4413      	add	r3, r2
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d207      	bcs.n	8000e28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e18:	f001 fdaa 	bl	8002970 <__errno>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	220c      	movs	r2, #12
 8000e20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e22:	f04f 33ff 	mov.w	r3, #4294967295
 8000e26:	e009      	b.n	8000e3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <_sbrk+0x64>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e2e:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <_sbrk+0x64>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4413      	add	r3, r2
 8000e36:	4a05      	ldr	r2, [pc, #20]	; (8000e4c <_sbrk+0x64>)
 8000e38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20020000 	.word	0x20020000
 8000e48:	00000400 	.word	0x00000400
 8000e4c:	20000084 	.word	0x20000084
 8000e50:	200003a0 	.word	0x200003a0

08000e54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <SystemInit+0x20>)
 8000e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e5e:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <SystemInit+0x20>)
 8000e60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eb0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e7c:	480d      	ldr	r0, [pc, #52]	; (8000eb4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e7e:	490e      	ldr	r1, [pc, #56]	; (8000eb8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e80:	4a0e      	ldr	r2, [pc, #56]	; (8000ebc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e84:	e002      	b.n	8000e8c <LoopCopyDataInit>

08000e86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e8a:	3304      	adds	r3, #4

08000e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e90:	d3f9      	bcc.n	8000e86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e92:	4a0b      	ldr	r2, [pc, #44]	; (8000ec0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e94:	4c0b      	ldr	r4, [pc, #44]	; (8000ec4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e98:	e001      	b.n	8000e9e <LoopFillZerobss>

08000e9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e9c:	3204      	adds	r2, #4

08000e9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea0:	d3fb      	bcc.n	8000e9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ea2:	f7ff ffd7 	bl	8000e54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ea6:	f001 fd69 	bl	800297c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eaa:	f7ff fe7d 	bl	8000ba8 <main>
  bx  lr    
 8000eae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000eb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000eb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ebc:	08003c70 	.word	0x08003c70
  ldr r2, =_sbss
 8000ec0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ec4:	200003a0 	.word	0x200003a0

08000ec8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec8:	e7fe      	b.n	8000ec8 <ADC_IRQHandler>
	...

08000ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_IncTick+0x20>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_IncTick+0x24>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4413      	add	r3, r2
 8000edc:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <HAL_IncTick+0x24>)
 8000ede:	6013      	str	r3, [r2, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	20000088 	.word	0x20000088

08000ef4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f001 fa0f 	bl	800232e <USB_GetMode>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	f040 80f6 	bne.w	8001104 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f001 f9f3 	bl	8002308 <USB_ReadInterrupts>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	f000 80ec 	beq.w	8001102 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f001 f9ea 	bl	8002308 <USB_ReadInterrupts>
 8000f34:	4603      	mov	r3, r0
 8000f36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000f3e:	d104      	bne.n	8000f4a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000f48:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f001 f9da 	bl	8002308 <USB_ReadInterrupts>
 8000f54:	4603      	mov	r3, r0
 8000f56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000f5e:	d104      	bne.n	8000f6a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000f68:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f001 f9ca 	bl	8002308 <USB_ReadInterrupts>
 8000f74:	4603      	mov	r3, r0
 8000f76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000f7e:	d104      	bne.n	8000f8a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000f88:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f001 f9ba 	bl	8002308 <USB_ReadInterrupts>
 8000f94:	4603      	mov	r3, r0
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d103      	bne.n	8000fa6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2202      	movs	r2, #2
 8000fa4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f001 f9ac 	bl	8002308 <USB_ReadInterrupts>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000fb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000fba:	d11c      	bne.n	8000ff6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000fc4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d10f      	bne.n	8000ff6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8000fd6:	2110      	movs	r1, #16
 8000fd8:	6938      	ldr	r0, [r7, #16]
 8000fda:	f001 f8d9 	bl	8002190 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8000fde:	6938      	ldr	r0, [r7, #16]
 8000fe0:	f001 f90a 	bl	80021f8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2101      	movs	r1, #1
 8000fea:	4618      	mov	r0, r3
 8000fec:	f001 f9ad 	bl	800234a <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f001 fc3e 	bl	8002872 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f001 f984 	bl	8002308 <USB_ReadInterrupts>
 8001000:	4603      	mov	r3, r0
 8001002:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001006:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800100a:	d102      	bne.n	8001012 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f001 f829 	bl	8002064 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4618      	mov	r0, r3
 8001018:	f001 f976 	bl	8002308 <USB_ReadInterrupts>
 800101c:	4603      	mov	r3, r0
 800101e:	f003 0308 	and.w	r3, r3, #8
 8001022:	2b08      	cmp	r3, #8
 8001024:	d106      	bne.n	8001034 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f001 fc07 	bl	800283a <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2208      	movs	r2, #8
 8001032:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f001 f965 	bl	8002308 <USB_ReadInterrupts>
 800103e:	4603      	mov	r3, r0
 8001040:	f003 0310 	and.w	r3, r3, #16
 8001044:	2b10      	cmp	r3, #16
 8001046:	d101      	bne.n	800104c <HAL_HCD_IRQHandler+0x158>
 8001048:	2301      	movs	r3, #1
 800104a:	e000      	b.n	800104e <HAL_HCD_IRQHandler+0x15a>
 800104c:	2300      	movs	r3, #0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d012      	beq.n	8001078 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	699a      	ldr	r2, [r3, #24]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f022 0210 	bic.w	r2, r2, #16
 8001060:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f000 ff2c 	bl	8001ec0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	699a      	ldr	r2, [r3, #24]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f042 0210 	orr.w	r2, r2, #16
 8001076:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f001 f943 	bl	8002308 <USB_ReadInterrupts>
 8001082:	4603      	mov	r3, r0
 8001084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001088:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800108c:	d13a      	bne.n	8001104 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4618      	mov	r0, r3
 8001094:	f001 f993 	bl	80023be <USB_HC_ReadInterrupt>
 8001098:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
 800109e:	e025      	b.n	80010ec <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	f003 030f 	and.w	r3, r3, #15
 80010a6:	68ba      	ldr	r2, [r7, #8]
 80010a8:	fa22 f303 	lsr.w	r3, r2, r3
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d018      	beq.n	80010e6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	015a      	lsls	r2, r3, #5
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4413      	add	r3, r2
 80010bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80010ca:	d106      	bne.n	80010da <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	4619      	mov	r1, r3
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f000 f836 	bl	8001144 <HCD_HC_IN_IRQHandler>
 80010d8:	e005      	b.n	80010e6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	4619      	mov	r1, r3
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f000 fb84 	bl	80017ee <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	3301      	adds	r3, #1
 80010ea:	617b      	str	r3, [r7, #20]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	697a      	ldr	r2, [r7, #20]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d3d4      	bcc.n	80010a0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80010fe:	615a      	str	r2, [r3, #20]
 8001100:	e000      	b.n	8001104 <HAL_HCD_IRQHandler+0x210>
      return;
 8001102:	bf00      	nop
    }
  }
}
 8001104:	3718      	adds	r7, #24
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001118:	2b01      	cmp	r3, #1
 800111a:	d101      	bne.n	8001120 <HAL_HCD_Stop+0x16>
 800111c:	2302      	movs	r3, #2
 800111e:	e00d      	b.n	800113c <HAL_HCD_Stop+0x32>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2201      	movs	r2, #1
 8001124:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4618      	mov	r0, r3
 800112e:	f001 fa53 	bl	80025d8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800113a:	2300      	movs	r3, #0
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800115a:	78fb      	ldrb	r3, [r7, #3]
 800115c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	015a      	lsls	r2, r3, #5
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	4413      	add	r3, r2
 8001166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	f003 0304 	and.w	r3, r3, #4
 8001170:	2b04      	cmp	r3, #4
 8001172:	d11a      	bne.n	80011aa <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	015a      	lsls	r2, r3, #5
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	4413      	add	r3, r2
 800117c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001180:	461a      	mov	r2, r3
 8001182:	2304      	movs	r3, #4
 8001184:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	212c      	movs	r1, #44	; 0x2c
 800118c:	fb01 f303 	mul.w	r3, r1, r3
 8001190:	4413      	add	r3, r2
 8001192:	3361      	adds	r3, #97	; 0x61
 8001194:	2206      	movs	r2, #6
 8001196:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	68fa      	ldr	r2, [r7, #12]
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	4611      	mov	r1, r2
 80011a2:	4618      	mov	r0, r3
 80011a4:	f001 f91c 	bl	80023e0 <USB_HC_Halt>
 80011a8:	e0af      	b.n	800130a <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	015a      	lsls	r2, r3, #5
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	4413      	add	r3, r2
 80011b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011c0:	d11b      	bne.n	80011fa <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	015a      	lsls	r2, r3, #5
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	4413      	add	r3, r2
 80011ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011ce:	461a      	mov	r2, r3
 80011d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	212c      	movs	r1, #44	; 0x2c
 80011dc:	fb01 f303 	mul.w	r3, r1, r3
 80011e0:	4413      	add	r3, r2
 80011e2:	3361      	adds	r3, #97	; 0x61
 80011e4:	2207      	movs	r2, #7
 80011e6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	68fa      	ldr	r2, [r7, #12]
 80011ee:	b2d2      	uxtb	r2, r2
 80011f0:	4611      	mov	r1, r2
 80011f2:	4618      	mov	r0, r3
 80011f4:	f001 f8f4 	bl	80023e0 <USB_HC_Halt>
 80011f8:	e087      	b.n	800130a <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	015a      	lsls	r2, r3, #5
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	4413      	add	r3, r2
 8001202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f003 0320 	and.w	r3, r3, #32
 800120c:	2b20      	cmp	r3, #32
 800120e:	d109      	bne.n	8001224 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	015a      	lsls	r2, r3, #5
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4413      	add	r3, r2
 8001218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800121c:	461a      	mov	r2, r3
 800121e:	2320      	movs	r3, #32
 8001220:	6093      	str	r3, [r2, #8]
 8001222:	e072      	b.n	800130a <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	015a      	lsls	r2, r3, #5
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	4413      	add	r3, r2
 800122c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f003 0308 	and.w	r3, r3, #8
 8001236:	2b08      	cmp	r3, #8
 8001238:	d11a      	bne.n	8001270 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	015a      	lsls	r2, r3, #5
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	4413      	add	r3, r2
 8001242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001246:	461a      	mov	r2, r3
 8001248:	2308      	movs	r3, #8
 800124a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	212c      	movs	r1, #44	; 0x2c
 8001252:	fb01 f303 	mul.w	r3, r1, r3
 8001256:	4413      	add	r3, r2
 8001258:	3361      	adds	r3, #97	; 0x61
 800125a:	2205      	movs	r2, #5
 800125c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	b2d2      	uxtb	r2, r2
 8001266:	4611      	mov	r1, r2
 8001268:	4618      	mov	r0, r3
 800126a:	f001 f8b9 	bl	80023e0 <USB_HC_Halt>
 800126e:	e04c      	b.n	800130a <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	015a      	lsls	r2, r3, #5
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	4413      	add	r3, r2
 8001278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001286:	d11b      	bne.n	80012c0 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	015a      	lsls	r2, r3, #5
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	4413      	add	r3, r2
 8001290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001294:	461a      	mov	r2, r3
 8001296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800129a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	212c      	movs	r1, #44	; 0x2c
 80012a2:	fb01 f303 	mul.w	r3, r1, r3
 80012a6:	4413      	add	r3, r2
 80012a8:	3361      	adds	r3, #97	; 0x61
 80012aa:	2208      	movs	r2, #8
 80012ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	b2d2      	uxtb	r2, r2
 80012b6:	4611      	mov	r1, r2
 80012b8:	4618      	mov	r0, r3
 80012ba:	f001 f891 	bl	80023e0 <USB_HC_Halt>
 80012be:	e024      	b.n	800130a <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	015a      	lsls	r2, r3, #5
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	4413      	add	r3, r2
 80012c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012d2:	2b80      	cmp	r3, #128	; 0x80
 80012d4:	d119      	bne.n	800130a <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	015a      	lsls	r2, r3, #5
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	4413      	add	r3, r2
 80012de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012e2:	461a      	mov	r2, r3
 80012e4:	2380      	movs	r3, #128	; 0x80
 80012e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	212c      	movs	r1, #44	; 0x2c
 80012ee:	fb01 f303 	mul.w	r3, r1, r3
 80012f2:	4413      	add	r3, r2
 80012f4:	3361      	adds	r3, #97	; 0x61
 80012f6:	2206      	movs	r2, #6
 80012f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	b2d2      	uxtb	r2, r2
 8001302:	4611      	mov	r1, r2
 8001304:	4618      	mov	r0, r3
 8001306:	f001 f86b 	bl	80023e0 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	015a      	lsls	r2, r3, #5
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	4413      	add	r3, r2
 8001312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800131c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001320:	d112      	bne.n	8001348 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	b2d2      	uxtb	r2, r2
 800132a:	4611      	mov	r1, r2
 800132c:	4618      	mov	r0, r3
 800132e:	f001 f857 	bl	80023e0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	015a      	lsls	r2, r3, #5
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	4413      	add	r3, r2
 800133a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800133e:	461a      	mov	r2, r3
 8001340:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001344:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001346:	e24e      	b.n	80017e6 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	015a      	lsls	r2, r3, #5
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	4413      	add	r3, r2
 8001350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	2b01      	cmp	r3, #1
 800135c:	f040 80df 	bne.w	800151e <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	691b      	ldr	r3, [r3, #16]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d019      	beq.n	800139c <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	212c      	movs	r1, #44	; 0x2c
 800136e:	fb01 f303 	mul.w	r3, r1, r3
 8001372:	4413      	add	r3, r2
 8001374:	3348      	adds	r3, #72	; 0x48
 8001376:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	0159      	lsls	r1, r3, #5
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	440b      	add	r3, r1
 8001380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001384:	691b      	ldr	r3, [r3, #16]
 8001386:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800138a:	1ad2      	subs	r2, r2, r3
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	202c      	movs	r0, #44	; 0x2c
 8001392:	fb00 f303 	mul.w	r3, r0, r3
 8001396:	440b      	add	r3, r1
 8001398:	3350      	adds	r3, #80	; 0x50
 800139a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	212c      	movs	r1, #44	; 0x2c
 80013a2:	fb01 f303 	mul.w	r3, r1, r3
 80013a6:	4413      	add	r3, r2
 80013a8:	3361      	adds	r3, #97	; 0x61
 80013aa:	2201      	movs	r2, #1
 80013ac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	212c      	movs	r1, #44	; 0x2c
 80013b4:	fb01 f303 	mul.w	r3, r1, r3
 80013b8:	4413      	add	r3, r2
 80013ba:	335c      	adds	r3, #92	; 0x5c
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	015a      	lsls	r2, r3, #5
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	4413      	add	r3, r2
 80013c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013cc:	461a      	mov	r2, r3
 80013ce:	2301      	movs	r3, #1
 80013d0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	212c      	movs	r1, #44	; 0x2c
 80013d8:	fb01 f303 	mul.w	r3, r1, r3
 80013dc:	4413      	add	r3, r2
 80013de:	333f      	adds	r3, #63	; 0x3f
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d009      	beq.n	80013fa <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	212c      	movs	r1, #44	; 0x2c
 80013ec:	fb01 f303 	mul.w	r3, r1, r3
 80013f0:	4413      	add	r3, r2
 80013f2:	333f      	adds	r3, #63	; 0x3f
 80013f4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d111      	bne.n	800141e <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	b2d2      	uxtb	r2, r2
 8001402:	4611      	mov	r1, r2
 8001404:	4618      	mov	r0, r3
 8001406:	f000 ffeb 	bl	80023e0 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	015a      	lsls	r2, r3, #5
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	4413      	add	r3, r2
 8001412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001416:	461a      	mov	r2, r3
 8001418:	2310      	movs	r3, #16
 800141a:	6093      	str	r3, [r2, #8]
 800141c:	e03a      	b.n	8001494 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	212c      	movs	r1, #44	; 0x2c
 8001424:	fb01 f303 	mul.w	r3, r1, r3
 8001428:	4413      	add	r3, r2
 800142a:	333f      	adds	r3, #63	; 0x3f
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b03      	cmp	r3, #3
 8001430:	d009      	beq.n	8001446 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	212c      	movs	r1, #44	; 0x2c
 8001438:	fb01 f303 	mul.w	r3, r1, r3
 800143c:	4413      	add	r3, r2
 800143e:	333f      	adds	r3, #63	; 0x3f
 8001440:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001442:	2b01      	cmp	r3, #1
 8001444:	d126      	bne.n	8001494 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	015a      	lsls	r2, r3, #5
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	4413      	add	r3, r2
 800144e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	68fa      	ldr	r2, [r7, #12]
 8001456:	0151      	lsls	r1, r2, #5
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	440a      	add	r2, r1
 800145c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001460:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001464:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	212c      	movs	r1, #44	; 0x2c
 800146c:	fb01 f303 	mul.w	r3, r1, r3
 8001470:	4413      	add	r3, r2
 8001472:	3360      	adds	r3, #96	; 0x60
 8001474:	2201      	movs	r2, #1
 8001476:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	b2d9      	uxtb	r1, r3
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	202c      	movs	r0, #44	; 0x2c
 8001482:	fb00 f303 	mul.w	r3, r0, r3
 8001486:	4413      	add	r3, r2
 8001488:	3360      	adds	r3, #96	; 0x60
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	461a      	mov	r2, r3
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f001 f9fd 	bl	800288e <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	691b      	ldr	r3, [r3, #16]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d12b      	bne.n	80014f4 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	212c      	movs	r1, #44	; 0x2c
 80014a2:	fb01 f303 	mul.w	r3, r1, r3
 80014a6:	4413      	add	r3, r2
 80014a8:	3348      	adds	r3, #72	; 0x48
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6879      	ldr	r1, [r7, #4]
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	202c      	movs	r0, #44	; 0x2c
 80014b2:	fb00 f202 	mul.w	r2, r0, r2
 80014b6:	440a      	add	r2, r1
 80014b8:	3240      	adds	r2, #64	; 0x40
 80014ba:	8812      	ldrh	r2, [r2, #0]
 80014bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f000 818e 	beq.w	80017e6 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	212c      	movs	r1, #44	; 0x2c
 80014d0:	fb01 f303 	mul.w	r3, r1, r3
 80014d4:	4413      	add	r3, r2
 80014d6:	3354      	adds	r3, #84	; 0x54
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	f083 0301 	eor.w	r3, r3, #1
 80014de:	b2d8      	uxtb	r0, r3
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	212c      	movs	r1, #44	; 0x2c
 80014e6:	fb01 f303 	mul.w	r3, r1, r3
 80014ea:	4413      	add	r3, r2
 80014ec:	3354      	adds	r3, #84	; 0x54
 80014ee:	4602      	mov	r2, r0
 80014f0:	701a      	strb	r2, [r3, #0]
}
 80014f2:	e178      	b.n	80017e6 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	212c      	movs	r1, #44	; 0x2c
 80014fa:	fb01 f303 	mul.w	r3, r1, r3
 80014fe:	4413      	add	r3, r2
 8001500:	3354      	adds	r3, #84	; 0x54
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	f083 0301 	eor.w	r3, r3, #1
 8001508:	b2d8      	uxtb	r0, r3
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	212c      	movs	r1, #44	; 0x2c
 8001510:	fb01 f303 	mul.w	r3, r1, r3
 8001514:	4413      	add	r3, r2
 8001516:	3354      	adds	r3, #84	; 0x54
 8001518:	4602      	mov	r2, r0
 800151a:	701a      	strb	r2, [r3, #0]
}
 800151c:	e163      	b.n	80017e6 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	015a      	lsls	r2, r3, #5
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	4413      	add	r3, r2
 8001526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	2b02      	cmp	r3, #2
 8001532:	f040 80f6 	bne.w	8001722 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	212c      	movs	r1, #44	; 0x2c
 800153c:	fb01 f303 	mul.w	r3, r1, r3
 8001540:	4413      	add	r3, r2
 8001542:	3361      	adds	r3, #97	; 0x61
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d109      	bne.n	800155e <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	212c      	movs	r1, #44	; 0x2c
 8001550:	fb01 f303 	mul.w	r3, r1, r3
 8001554:	4413      	add	r3, r2
 8001556:	3360      	adds	r3, #96	; 0x60
 8001558:	2201      	movs	r2, #1
 800155a:	701a      	strb	r2, [r3, #0]
 800155c:	e0c9      	b.n	80016f2 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	212c      	movs	r1, #44	; 0x2c
 8001564:	fb01 f303 	mul.w	r3, r1, r3
 8001568:	4413      	add	r3, r2
 800156a:	3361      	adds	r3, #97	; 0x61
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b05      	cmp	r3, #5
 8001570:	d109      	bne.n	8001586 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	212c      	movs	r1, #44	; 0x2c
 8001578:	fb01 f303 	mul.w	r3, r1, r3
 800157c:	4413      	add	r3, r2
 800157e:	3360      	adds	r3, #96	; 0x60
 8001580:	2205      	movs	r2, #5
 8001582:	701a      	strb	r2, [r3, #0]
 8001584:	e0b5      	b.n	80016f2 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	212c      	movs	r1, #44	; 0x2c
 800158c:	fb01 f303 	mul.w	r3, r1, r3
 8001590:	4413      	add	r3, r2
 8001592:	3361      	adds	r3, #97	; 0x61
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b06      	cmp	r3, #6
 8001598:	d009      	beq.n	80015ae <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	212c      	movs	r1, #44	; 0x2c
 80015a0:	fb01 f303 	mul.w	r3, r1, r3
 80015a4:	4413      	add	r3, r2
 80015a6:	3361      	adds	r3, #97	; 0x61
 80015a8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80015aa:	2b08      	cmp	r3, #8
 80015ac:	d150      	bne.n	8001650 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	212c      	movs	r1, #44	; 0x2c
 80015b4:	fb01 f303 	mul.w	r3, r1, r3
 80015b8:	4413      	add	r3, r2
 80015ba:	335c      	adds	r3, #92	; 0x5c
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	1c5a      	adds	r2, r3, #1
 80015c0:	6879      	ldr	r1, [r7, #4]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	202c      	movs	r0, #44	; 0x2c
 80015c6:	fb00 f303 	mul.w	r3, r0, r3
 80015ca:	440b      	add	r3, r1
 80015cc:	335c      	adds	r3, #92	; 0x5c
 80015ce:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	212c      	movs	r1, #44	; 0x2c
 80015d6:	fb01 f303 	mul.w	r3, r1, r3
 80015da:	4413      	add	r3, r2
 80015dc:	335c      	adds	r3, #92	; 0x5c
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d912      	bls.n	800160a <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	212c      	movs	r1, #44	; 0x2c
 80015ea:	fb01 f303 	mul.w	r3, r1, r3
 80015ee:	4413      	add	r3, r2
 80015f0:	335c      	adds	r3, #92	; 0x5c
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	212c      	movs	r1, #44	; 0x2c
 80015fc:	fb01 f303 	mul.w	r3, r1, r3
 8001600:	4413      	add	r3, r2
 8001602:	3360      	adds	r3, #96	; 0x60
 8001604:	2204      	movs	r2, #4
 8001606:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001608:	e073      	b.n	80016f2 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	212c      	movs	r1, #44	; 0x2c
 8001610:	fb01 f303 	mul.w	r3, r1, r3
 8001614:	4413      	add	r3, r2
 8001616:	3360      	adds	r3, #96	; 0x60
 8001618:	2202      	movs	r2, #2
 800161a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	015a      	lsls	r2, r3, #5
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	4413      	add	r3, r2
 8001624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001632:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800163a:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	015a      	lsls	r2, r3, #5
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	4413      	add	r3, r2
 8001644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001648:	461a      	mov	r2, r3
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800164e:	e050      	b.n	80016f2 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	212c      	movs	r1, #44	; 0x2c
 8001656:	fb01 f303 	mul.w	r3, r1, r3
 800165a:	4413      	add	r3, r2
 800165c:	3361      	adds	r3, #97	; 0x61
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b03      	cmp	r3, #3
 8001662:	d122      	bne.n	80016aa <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	212c      	movs	r1, #44	; 0x2c
 800166a:	fb01 f303 	mul.w	r3, r1, r3
 800166e:	4413      	add	r3, r2
 8001670:	3360      	adds	r3, #96	; 0x60
 8001672:	2202      	movs	r2, #2
 8001674:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	015a      	lsls	r2, r3, #5
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	4413      	add	r3, r2
 800167e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800168c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001694:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	015a      	lsls	r2, r3, #5
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	4413      	add	r3, r2
 800169e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016a2:	461a      	mov	r2, r3
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	6013      	str	r3, [r2, #0]
 80016a8:	e023      	b.n	80016f2 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	212c      	movs	r1, #44	; 0x2c
 80016b0:	fb01 f303 	mul.w	r3, r1, r3
 80016b4:	4413      	add	r3, r2
 80016b6:	3361      	adds	r3, #97	; 0x61
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b07      	cmp	r3, #7
 80016bc:	d119      	bne.n	80016f2 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	212c      	movs	r1, #44	; 0x2c
 80016c4:	fb01 f303 	mul.w	r3, r1, r3
 80016c8:	4413      	add	r3, r2
 80016ca:	335c      	adds	r3, #92	; 0x5c
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	1c5a      	adds	r2, r3, #1
 80016d0:	6879      	ldr	r1, [r7, #4]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	202c      	movs	r0, #44	; 0x2c
 80016d6:	fb00 f303 	mul.w	r3, r0, r3
 80016da:	440b      	add	r3, r1
 80016dc:	335c      	adds	r3, #92	; 0x5c
 80016de:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	212c      	movs	r1, #44	; 0x2c
 80016e6:	fb01 f303 	mul.w	r3, r1, r3
 80016ea:	4413      	add	r3, r2
 80016ec:	3360      	adds	r3, #96	; 0x60
 80016ee:	2204      	movs	r2, #4
 80016f0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	015a      	lsls	r2, r3, #5
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	4413      	add	r3, r2
 80016fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016fe:	461a      	mov	r2, r3
 8001700:	2302      	movs	r3, #2
 8001702:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	b2d9      	uxtb	r1, r3
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	202c      	movs	r0, #44	; 0x2c
 800170e:	fb00 f303 	mul.w	r3, r0, r3
 8001712:	4413      	add	r3, r2
 8001714:	3360      	adds	r3, #96	; 0x60
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	461a      	mov	r2, r3
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f001 f8b7 	bl	800288e <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001720:	e061      	b.n	80017e6 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	015a      	lsls	r2, r3, #5
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	4413      	add	r3, r2
 800172a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f003 0310 	and.w	r3, r3, #16
 8001734:	2b10      	cmp	r3, #16
 8001736:	d156      	bne.n	80017e6 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	212c      	movs	r1, #44	; 0x2c
 800173e:	fb01 f303 	mul.w	r3, r1, r3
 8001742:	4413      	add	r3, r2
 8001744:	333f      	adds	r3, #63	; 0x3f
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b03      	cmp	r3, #3
 800174a:	d111      	bne.n	8001770 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	212c      	movs	r1, #44	; 0x2c
 8001752:	fb01 f303 	mul.w	r3, r1, r3
 8001756:	4413      	add	r3, r2
 8001758:	335c      	adds	r3, #92	; 0x5c
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	b2d2      	uxtb	r2, r2
 8001766:	4611      	mov	r1, r2
 8001768:	4618      	mov	r0, r3
 800176a:	f000 fe39 	bl	80023e0 <USB_HC_Halt>
 800176e:	e031      	b.n	80017d4 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	212c      	movs	r1, #44	; 0x2c
 8001776:	fb01 f303 	mul.w	r3, r1, r3
 800177a:	4413      	add	r3, r2
 800177c:	333f      	adds	r3, #63	; 0x3f
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d009      	beq.n	8001798 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	212c      	movs	r1, #44	; 0x2c
 800178a:	fb01 f303 	mul.w	r3, r1, r3
 800178e:	4413      	add	r3, r2
 8001790:	333f      	adds	r3, #63	; 0x3f
 8001792:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001794:	2b02      	cmp	r3, #2
 8001796:	d11d      	bne.n	80017d4 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	212c      	movs	r1, #44	; 0x2c
 800179e:	fb01 f303 	mul.w	r3, r1, r3
 80017a2:	4413      	add	r3, r2
 80017a4:	335c      	adds	r3, #92	; 0x5c
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d110      	bne.n	80017d4 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	212c      	movs	r1, #44	; 0x2c
 80017b8:	fb01 f303 	mul.w	r3, r1, r3
 80017bc:	4413      	add	r3, r2
 80017be:	3361      	adds	r3, #97	; 0x61
 80017c0:	2203      	movs	r2, #3
 80017c2:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	b2d2      	uxtb	r2, r2
 80017cc:	4611      	mov	r1, r2
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 fe06 	bl	80023e0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	015a      	lsls	r2, r3, #5
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	4413      	add	r3, r2
 80017dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017e0:	461a      	mov	r2, r3
 80017e2:	2310      	movs	r3, #16
 80017e4:	6093      	str	r3, [r2, #8]
}
 80017e6:	bf00      	nop
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b088      	sub	sp, #32
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
 80017f6:	460b      	mov	r3, r1
 80017f8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8001804:	78fb      	ldrb	r3, [r7, #3]
 8001806:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	015a      	lsls	r2, r3, #5
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	4413      	add	r3, r2
 8001810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f003 0304 	and.w	r3, r3, #4
 800181a:	2b04      	cmp	r3, #4
 800181c:	d11a      	bne.n	8001854 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	015a      	lsls	r2, r3, #5
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	4413      	add	r3, r2
 8001826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800182a:	461a      	mov	r2, r3
 800182c:	2304      	movs	r3, #4
 800182e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	212c      	movs	r1, #44	; 0x2c
 8001836:	fb01 f303 	mul.w	r3, r1, r3
 800183a:	4413      	add	r3, r2
 800183c:	3361      	adds	r3, #97	; 0x61
 800183e:	2206      	movs	r2, #6
 8001840:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	697a      	ldr	r2, [r7, #20]
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	4611      	mov	r1, r2
 800184c:	4618      	mov	r0, r3
 800184e:	f000 fdc7 	bl	80023e0 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8001852:	e331      	b.n	8001eb8 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	015a      	lsls	r2, r3, #5
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	4413      	add	r3, r2
 800185c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f003 0320 	and.w	r3, r3, #32
 8001866:	2b20      	cmp	r3, #32
 8001868:	d12e      	bne.n	80018c8 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	015a      	lsls	r2, r3, #5
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	4413      	add	r3, r2
 8001872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001876:	461a      	mov	r2, r3
 8001878:	2320      	movs	r3, #32
 800187a:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	212c      	movs	r1, #44	; 0x2c
 8001882:	fb01 f303 	mul.w	r3, r1, r3
 8001886:	4413      	add	r3, r2
 8001888:	333d      	adds	r3, #61	; 0x3d
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b01      	cmp	r3, #1
 800188e:	f040 8313 	bne.w	8001eb8 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	212c      	movs	r1, #44	; 0x2c
 8001898:	fb01 f303 	mul.w	r3, r1, r3
 800189c:	4413      	add	r3, r2
 800189e:	333d      	adds	r3, #61	; 0x3d
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	212c      	movs	r1, #44	; 0x2c
 80018aa:	fb01 f303 	mul.w	r3, r1, r3
 80018ae:	4413      	add	r3, r2
 80018b0:	3360      	adds	r3, #96	; 0x60
 80018b2:	2202      	movs	r2, #2
 80018b4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	4611      	mov	r1, r2
 80018c0:	4618      	mov	r0, r3
 80018c2:	f000 fd8d 	bl	80023e0 <USB_HC_Halt>
}
 80018c6:	e2f7      	b.n	8001eb8 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	015a      	lsls	r2, r3, #5
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	4413      	add	r3, r2
 80018d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018de:	d112      	bne.n	8001906 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	015a      	lsls	r2, r3, #5
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	4413      	add	r3, r2
 80018e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018ec:	461a      	mov	r2, r3
 80018ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018f2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	4611      	mov	r1, r2
 80018fe:	4618      	mov	r0, r3
 8001900:	f000 fd6e 	bl	80023e0 <USB_HC_Halt>
}
 8001904:	e2d8      	b.n	8001eb8 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	015a      	lsls	r2, r3, #5
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	4413      	add	r3, r2
 800190e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	2b01      	cmp	r3, #1
 800191a:	d140      	bne.n	800199e <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	212c      	movs	r1, #44	; 0x2c
 8001922:	fb01 f303 	mul.w	r3, r1, r3
 8001926:	4413      	add	r3, r2
 8001928:	335c      	adds	r3, #92	; 0x5c
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	015a      	lsls	r2, r3, #5
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	4413      	add	r3, r2
 8001936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001940:	2b40      	cmp	r3, #64	; 0x40
 8001942:	d111      	bne.n	8001968 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	212c      	movs	r1, #44	; 0x2c
 800194a:	fb01 f303 	mul.w	r3, r1, r3
 800194e:	4413      	add	r3, r2
 8001950:	333d      	adds	r3, #61	; 0x3d
 8001952:	2201      	movs	r2, #1
 8001954:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	015a      	lsls	r2, r3, #5
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	4413      	add	r3, r2
 800195e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001962:	461a      	mov	r2, r3
 8001964:	2340      	movs	r3, #64	; 0x40
 8001966:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	015a      	lsls	r2, r3, #5
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	4413      	add	r3, r2
 8001970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001974:	461a      	mov	r2, r3
 8001976:	2301      	movs	r3, #1
 8001978:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	212c      	movs	r1, #44	; 0x2c
 8001980:	fb01 f303 	mul.w	r3, r1, r3
 8001984:	4413      	add	r3, r2
 8001986:	3361      	adds	r3, #97	; 0x61
 8001988:	2201      	movs	r2, #1
 800198a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	4611      	mov	r1, r2
 8001996:	4618      	mov	r0, r3
 8001998:	f000 fd22 	bl	80023e0 <USB_HC_Halt>
}
 800199c:	e28c      	b.n	8001eb8 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	015a      	lsls	r2, r3, #5
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	4413      	add	r3, r2
 80019a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019b0:	2b40      	cmp	r3, #64	; 0x40
 80019b2:	d12c      	bne.n	8001a0e <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	212c      	movs	r1, #44	; 0x2c
 80019ba:	fb01 f303 	mul.w	r3, r1, r3
 80019be:	4413      	add	r3, r2
 80019c0:	3361      	adds	r3, #97	; 0x61
 80019c2:	2204      	movs	r2, #4
 80019c4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	212c      	movs	r1, #44	; 0x2c
 80019cc:	fb01 f303 	mul.w	r3, r1, r3
 80019d0:	4413      	add	r3, r2
 80019d2:	333d      	adds	r3, #61	; 0x3d
 80019d4:	2201      	movs	r2, #1
 80019d6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	212c      	movs	r1, #44	; 0x2c
 80019de:	fb01 f303 	mul.w	r3, r1, r3
 80019e2:	4413      	add	r3, r2
 80019e4:	335c      	adds	r3, #92	; 0x5c
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	697a      	ldr	r2, [r7, #20]
 80019f0:	b2d2      	uxtb	r2, r2
 80019f2:	4611      	mov	r1, r2
 80019f4:	4618      	mov	r0, r3
 80019f6:	f000 fcf3 	bl	80023e0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	015a      	lsls	r2, r3, #5
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	4413      	add	r3, r2
 8001a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a06:	461a      	mov	r2, r3
 8001a08:	2340      	movs	r3, #64	; 0x40
 8001a0a:	6093      	str	r3, [r2, #8]
}
 8001a0c:	e254      	b.n	8001eb8 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	015a      	lsls	r2, r3, #5
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	4413      	add	r3, r2
 8001a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 0308 	and.w	r3, r3, #8
 8001a20:	2b08      	cmp	r3, #8
 8001a22:	d11a      	bne.n	8001a5a <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	015a      	lsls	r2, r3, #5
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a30:	461a      	mov	r2, r3
 8001a32:	2308      	movs	r3, #8
 8001a34:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	212c      	movs	r1, #44	; 0x2c
 8001a3c:	fb01 f303 	mul.w	r3, r1, r3
 8001a40:	4413      	add	r3, r2
 8001a42:	3361      	adds	r3, #97	; 0x61
 8001a44:	2205      	movs	r2, #5
 8001a46:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	4611      	mov	r1, r2
 8001a52:	4618      	mov	r0, r3
 8001a54:	f000 fcc4 	bl	80023e0 <USB_HC_Halt>
}
 8001a58:	e22e      	b.n	8001eb8 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	015a      	lsls	r2, r3, #5
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	4413      	add	r3, r2
 8001a62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 0310 	and.w	r3, r3, #16
 8001a6c:	2b10      	cmp	r3, #16
 8001a6e:	d140      	bne.n	8001af2 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	212c      	movs	r1, #44	; 0x2c
 8001a76:	fb01 f303 	mul.w	r3, r1, r3
 8001a7a:	4413      	add	r3, r2
 8001a7c:	335c      	adds	r3, #92	; 0x5c
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	212c      	movs	r1, #44	; 0x2c
 8001a88:	fb01 f303 	mul.w	r3, r1, r3
 8001a8c:	4413      	add	r3, r2
 8001a8e:	3361      	adds	r3, #97	; 0x61
 8001a90:	2203      	movs	r2, #3
 8001a92:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	212c      	movs	r1, #44	; 0x2c
 8001a9a:	fb01 f303 	mul.w	r3, r1, r3
 8001a9e:	4413      	add	r3, r2
 8001aa0:	333d      	adds	r3, #61	; 0x3d
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d112      	bne.n	8001ace <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	212c      	movs	r1, #44	; 0x2c
 8001aae:	fb01 f303 	mul.w	r3, r1, r3
 8001ab2:	4413      	add	r3, r2
 8001ab4:	333c      	adds	r3, #60	; 0x3c
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d108      	bne.n	8001ace <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	212c      	movs	r1, #44	; 0x2c
 8001ac2:	fb01 f303 	mul.w	r3, r1, r3
 8001ac6:	4413      	add	r3, r2
 8001ac8:	333d      	adds	r3, #61	; 0x3d
 8001aca:	2201      	movs	r2, #1
 8001acc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	b2d2      	uxtb	r2, r2
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f000 fc81 	bl	80023e0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	015a      	lsls	r2, r3, #5
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aea:	461a      	mov	r2, r3
 8001aec:	2310      	movs	r3, #16
 8001aee:	6093      	str	r3, [r2, #8]
}
 8001af0:	e1e2      	b.n	8001eb8 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	015a      	lsls	r2, r3, #5
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	4413      	add	r3, r2
 8001afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b04:	2b80      	cmp	r3, #128	; 0x80
 8001b06:	d164      	bne.n	8001bd2 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d111      	bne.n	8001b34 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	212c      	movs	r1, #44	; 0x2c
 8001b16:	fb01 f303 	mul.w	r3, r1, r3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	3361      	adds	r3, #97	; 0x61
 8001b1e:	2206      	movs	r2, #6
 8001b20:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	4611      	mov	r1, r2
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f000 fc57 	bl	80023e0 <USB_HC_Halt>
 8001b32:	e044      	b.n	8001bbe <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	212c      	movs	r1, #44	; 0x2c
 8001b3a:	fb01 f303 	mul.w	r3, r1, r3
 8001b3e:	4413      	add	r3, r2
 8001b40:	335c      	adds	r3, #92	; 0x5c
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	1c5a      	adds	r2, r3, #1
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	202c      	movs	r0, #44	; 0x2c
 8001b4c:	fb00 f303 	mul.w	r3, r0, r3
 8001b50:	440b      	add	r3, r1
 8001b52:	335c      	adds	r3, #92	; 0x5c
 8001b54:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	212c      	movs	r1, #44	; 0x2c
 8001b5c:	fb01 f303 	mul.w	r3, r1, r3
 8001b60:	4413      	add	r3, r2
 8001b62:	335c      	adds	r3, #92	; 0x5c
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d920      	bls.n	8001bac <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	212c      	movs	r1, #44	; 0x2c
 8001b70:	fb01 f303 	mul.w	r3, r1, r3
 8001b74:	4413      	add	r3, r2
 8001b76:	335c      	adds	r3, #92	; 0x5c
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	212c      	movs	r1, #44	; 0x2c
 8001b82:	fb01 f303 	mul.w	r3, r1, r3
 8001b86:	4413      	add	r3, r2
 8001b88:	3360      	adds	r3, #96	; 0x60
 8001b8a:	2204      	movs	r2, #4
 8001b8c:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	b2d9      	uxtb	r1, r3
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	202c      	movs	r0, #44	; 0x2c
 8001b98:	fb00 f303 	mul.w	r3, r0, r3
 8001b9c:	4413      	add	r3, r2
 8001b9e:	3360      	adds	r3, #96	; 0x60
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 fe72 	bl	800288e <HAL_HCD_HC_NotifyURBChange_Callback>
 8001baa:	e008      	b.n	8001bbe <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	212c      	movs	r1, #44	; 0x2c
 8001bb2:	fb01 f303 	mul.w	r3, r1, r3
 8001bb6:	4413      	add	r3, r2
 8001bb8:	3360      	adds	r3, #96	; 0x60
 8001bba:	2202      	movs	r2, #2
 8001bbc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	015a      	lsls	r2, r3, #5
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bca:	461a      	mov	r2, r3
 8001bcc:	2380      	movs	r3, #128	; 0x80
 8001bce:	6093      	str	r3, [r2, #8]
}
 8001bd0:	e172      	b.n	8001eb8 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	015a      	lsls	r2, r3, #5
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	4413      	add	r3, r2
 8001bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001be8:	d11b      	bne.n	8001c22 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	212c      	movs	r1, #44	; 0x2c
 8001bf0:	fb01 f303 	mul.w	r3, r1, r3
 8001bf4:	4413      	add	r3, r2
 8001bf6:	3361      	adds	r3, #97	; 0x61
 8001bf8:	2208      	movs	r2, #8
 8001bfa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	697a      	ldr	r2, [r7, #20]
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	4611      	mov	r1, r2
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 fbea 	bl	80023e0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	015a      	lsls	r2, r3, #5
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	4413      	add	r3, r2
 8001c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c18:	461a      	mov	r2, r3
 8001c1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c1e:	6093      	str	r3, [r2, #8]
}
 8001c20:	e14a      	b.n	8001eb8 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	015a      	lsls	r2, r3, #5
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	4413      	add	r3, r2
 8001c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	f040 813f 	bne.w	8001eb8 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	212c      	movs	r1, #44	; 0x2c
 8001c40:	fb01 f303 	mul.w	r3, r1, r3
 8001c44:	4413      	add	r3, r2
 8001c46:	3361      	adds	r3, #97	; 0x61
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d17d      	bne.n	8001d4a <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	212c      	movs	r1, #44	; 0x2c
 8001c54:	fb01 f303 	mul.w	r3, r1, r3
 8001c58:	4413      	add	r3, r2
 8001c5a:	3360      	adds	r3, #96	; 0x60
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	212c      	movs	r1, #44	; 0x2c
 8001c66:	fb01 f303 	mul.w	r3, r1, r3
 8001c6a:	4413      	add	r3, r2
 8001c6c:	333f      	adds	r3, #63	; 0x3f
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d00a      	beq.n	8001c8a <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	212c      	movs	r1, #44	; 0x2c
 8001c7a:	fb01 f303 	mul.w	r3, r1, r3
 8001c7e:	4413      	add	r3, r2
 8001c80:	333f      	adds	r3, #63	; 0x3f
 8001c82:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001c84:	2b03      	cmp	r3, #3
 8001c86:	f040 8100 	bne.w	8001e8a <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d113      	bne.n	8001cba <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	212c      	movs	r1, #44	; 0x2c
 8001c98:	fb01 f303 	mul.w	r3, r1, r3
 8001c9c:	4413      	add	r3, r2
 8001c9e:	3355      	adds	r3, #85	; 0x55
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	f083 0301 	eor.w	r3, r3, #1
 8001ca6:	b2d8      	uxtb	r0, r3
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	212c      	movs	r1, #44	; 0x2c
 8001cae:	fb01 f303 	mul.w	r3, r1, r3
 8001cb2:	4413      	add	r3, r2
 8001cb4:	3355      	adds	r3, #85	; 0x55
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	f040 80e3 	bne.w	8001e8a <HCD_HC_OUT_IRQHandler+0x69c>
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	212c      	movs	r1, #44	; 0x2c
 8001cca:	fb01 f303 	mul.w	r3, r1, r3
 8001cce:	4413      	add	r3, r2
 8001cd0:	334c      	adds	r3, #76	; 0x4c
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 80d8 	beq.w	8001e8a <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	212c      	movs	r1, #44	; 0x2c
 8001ce0:	fb01 f303 	mul.w	r3, r1, r3
 8001ce4:	4413      	add	r3, r2
 8001ce6:	334c      	adds	r3, #76	; 0x4c
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	202c      	movs	r0, #44	; 0x2c
 8001cf0:	fb00 f202 	mul.w	r2, r0, r2
 8001cf4:	440a      	add	r2, r1
 8001cf6:	3240      	adds	r2, #64	; 0x40
 8001cf8:	8812      	ldrh	r2, [r2, #0]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	202c      	movs	r0, #44	; 0x2c
 8001d04:	fb00 f202 	mul.w	r2, r0, r2
 8001d08:	440a      	add	r2, r1
 8001d0a:	3240      	adds	r2, #64	; 0x40
 8001d0c:	8812      	ldrh	r2, [r2, #0]
 8001d0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d12:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f000 80b5 	beq.w	8001e8a <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	212c      	movs	r1, #44	; 0x2c
 8001d26:	fb01 f303 	mul.w	r3, r1, r3
 8001d2a:	4413      	add	r3, r2
 8001d2c:	3355      	adds	r3, #85	; 0x55
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	f083 0301 	eor.w	r3, r3, #1
 8001d34:	b2d8      	uxtb	r0, r3
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	212c      	movs	r1, #44	; 0x2c
 8001d3c:	fb01 f303 	mul.w	r3, r1, r3
 8001d40:	4413      	add	r3, r2
 8001d42:	3355      	adds	r3, #85	; 0x55
 8001d44:	4602      	mov	r2, r0
 8001d46:	701a      	strb	r2, [r3, #0]
 8001d48:	e09f      	b.n	8001e8a <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	212c      	movs	r1, #44	; 0x2c
 8001d50:	fb01 f303 	mul.w	r3, r1, r3
 8001d54:	4413      	add	r3, r2
 8001d56:	3361      	adds	r3, #97	; 0x61
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b03      	cmp	r3, #3
 8001d5c:	d109      	bne.n	8001d72 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	212c      	movs	r1, #44	; 0x2c
 8001d64:	fb01 f303 	mul.w	r3, r1, r3
 8001d68:	4413      	add	r3, r2
 8001d6a:	3360      	adds	r3, #96	; 0x60
 8001d6c:	2202      	movs	r2, #2
 8001d6e:	701a      	strb	r2, [r3, #0]
 8001d70:	e08b      	b.n	8001e8a <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	212c      	movs	r1, #44	; 0x2c
 8001d78:	fb01 f303 	mul.w	r3, r1, r3
 8001d7c:	4413      	add	r3, r2
 8001d7e:	3361      	adds	r3, #97	; 0x61
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	d109      	bne.n	8001d9a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	212c      	movs	r1, #44	; 0x2c
 8001d8c:	fb01 f303 	mul.w	r3, r1, r3
 8001d90:	4413      	add	r3, r2
 8001d92:	3360      	adds	r3, #96	; 0x60
 8001d94:	2202      	movs	r2, #2
 8001d96:	701a      	strb	r2, [r3, #0]
 8001d98:	e077      	b.n	8001e8a <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	212c      	movs	r1, #44	; 0x2c
 8001da0:	fb01 f303 	mul.w	r3, r1, r3
 8001da4:	4413      	add	r3, r2
 8001da6:	3361      	adds	r3, #97	; 0x61
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2b05      	cmp	r3, #5
 8001dac:	d109      	bne.n	8001dc2 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	212c      	movs	r1, #44	; 0x2c
 8001db4:	fb01 f303 	mul.w	r3, r1, r3
 8001db8:	4413      	add	r3, r2
 8001dba:	3360      	adds	r3, #96	; 0x60
 8001dbc:	2205      	movs	r2, #5
 8001dbe:	701a      	strb	r2, [r3, #0]
 8001dc0:	e063      	b.n	8001e8a <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	212c      	movs	r1, #44	; 0x2c
 8001dc8:	fb01 f303 	mul.w	r3, r1, r3
 8001dcc:	4413      	add	r3, r2
 8001dce:	3361      	adds	r3, #97	; 0x61
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b06      	cmp	r3, #6
 8001dd4:	d009      	beq.n	8001dea <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	212c      	movs	r1, #44	; 0x2c
 8001ddc:	fb01 f303 	mul.w	r3, r1, r3
 8001de0:	4413      	add	r3, r2
 8001de2:	3361      	adds	r3, #97	; 0x61
 8001de4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001de6:	2b08      	cmp	r3, #8
 8001de8:	d14f      	bne.n	8001e8a <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	212c      	movs	r1, #44	; 0x2c
 8001df0:	fb01 f303 	mul.w	r3, r1, r3
 8001df4:	4413      	add	r3, r2
 8001df6:	335c      	adds	r3, #92	; 0x5c
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	1c5a      	adds	r2, r3, #1
 8001dfc:	6879      	ldr	r1, [r7, #4]
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	202c      	movs	r0, #44	; 0x2c
 8001e02:	fb00 f303 	mul.w	r3, r0, r3
 8001e06:	440b      	add	r3, r1
 8001e08:	335c      	adds	r3, #92	; 0x5c
 8001e0a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	212c      	movs	r1, #44	; 0x2c
 8001e12:	fb01 f303 	mul.w	r3, r1, r3
 8001e16:	4413      	add	r3, r2
 8001e18:	335c      	adds	r3, #92	; 0x5c
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d912      	bls.n	8001e46 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	212c      	movs	r1, #44	; 0x2c
 8001e26:	fb01 f303 	mul.w	r3, r1, r3
 8001e2a:	4413      	add	r3, r2
 8001e2c:	335c      	adds	r3, #92	; 0x5c
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	212c      	movs	r1, #44	; 0x2c
 8001e38:	fb01 f303 	mul.w	r3, r1, r3
 8001e3c:	4413      	add	r3, r2
 8001e3e:	3360      	adds	r3, #96	; 0x60
 8001e40:	2204      	movs	r2, #4
 8001e42:	701a      	strb	r2, [r3, #0]
 8001e44:	e021      	b.n	8001e8a <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	212c      	movs	r1, #44	; 0x2c
 8001e4c:	fb01 f303 	mul.w	r3, r1, r3
 8001e50:	4413      	add	r3, r2
 8001e52:	3360      	adds	r3, #96	; 0x60
 8001e54:	2202      	movs	r2, #2
 8001e56:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	015a      	lsls	r2, r3, #5
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	4413      	add	r3, r2
 8001e60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001e6e:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e76:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	015a      	lsls	r2, r3, #5
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	4413      	add	r3, r2
 8001e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e84:	461a      	mov	r2, r3
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	015a      	lsls	r2, r3, #5
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	4413      	add	r3, r2
 8001e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e96:	461a      	mov	r2, r3
 8001e98:	2302      	movs	r3, #2
 8001e9a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	b2d9      	uxtb	r1, r3
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	202c      	movs	r0, #44	; 0x2c
 8001ea6:	fb00 f303 	mul.w	r3, r0, r3
 8001eaa:	4413      	add	r3, r2
 8001eac:	3360      	adds	r3, #96	; 0x60
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 fceb 	bl	800288e <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001eb8:	bf00      	nop
 8001eba:	3720      	adds	r7, #32
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08a      	sub	sp, #40	; 0x28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	f003 030f 	and.w	r3, r3, #15
 8001ee0:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	0c5b      	lsrs	r3, r3, #17
 8001ee6:	f003 030f 	and.w	r3, r3, #15
 8001eea:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	091b      	lsrs	r3, r3, #4
 8001ef0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ef4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d004      	beq.n	8001f06 <HCD_RXQLVL_IRQHandler+0x46>
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	2b05      	cmp	r3, #5
 8001f00:	f000 80a9 	beq.w	8002056 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8001f04:	e0aa      	b.n	800205c <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f000 80a6 	beq.w	800205a <HCD_RXQLVL_IRQHandler+0x19a>
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	212c      	movs	r1, #44	; 0x2c
 8001f14:	fb01 f303 	mul.w	r3, r1, r3
 8001f18:	4413      	add	r3, r2
 8001f1a:	3344      	adds	r3, #68	; 0x44
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 809b 	beq.w	800205a <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	212c      	movs	r1, #44	; 0x2c
 8001f2a:	fb01 f303 	mul.w	r3, r1, r3
 8001f2e:	4413      	add	r3, r2
 8001f30:	3350      	adds	r3, #80	; 0x50
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	441a      	add	r2, r3
 8001f38:	6879      	ldr	r1, [r7, #4]
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	202c      	movs	r0, #44	; 0x2c
 8001f3e:	fb00 f303 	mul.w	r3, r0, r3
 8001f42:	440b      	add	r3, r1
 8001f44:	334c      	adds	r3, #76	; 0x4c
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d87a      	bhi.n	8002042 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6818      	ldr	r0, [r3, #0]
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	212c      	movs	r1, #44	; 0x2c
 8001f56:	fb01 f303 	mul.w	r3, r1, r3
 8001f5a:	4413      	add	r3, r2
 8001f5c:	3344      	adds	r3, #68	; 0x44
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	b292      	uxth	r2, r2
 8001f64:	4619      	mov	r1, r3
 8001f66:	f000 f977 	bl	8002258 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	212c      	movs	r1, #44	; 0x2c
 8001f70:	fb01 f303 	mul.w	r3, r1, r3
 8001f74:	4413      	add	r3, r2
 8001f76:	3344      	adds	r3, #68	; 0x44
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	441a      	add	r2, r3
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	202c      	movs	r0, #44	; 0x2c
 8001f84:	fb00 f303 	mul.w	r3, r0, r3
 8001f88:	440b      	add	r3, r1
 8001f8a:	3344      	adds	r3, #68	; 0x44
 8001f8c:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	212c      	movs	r1, #44	; 0x2c
 8001f94:	fb01 f303 	mul.w	r3, r1, r3
 8001f98:	4413      	add	r3, r2
 8001f9a:	3350      	adds	r3, #80	; 0x50
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	441a      	add	r2, r3
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	202c      	movs	r0, #44	; 0x2c
 8001fa8:	fb00 f303 	mul.w	r3, r0, r3
 8001fac:	440b      	add	r3, r1
 8001fae:	3350      	adds	r3, #80	; 0x50
 8001fb0:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	015a      	lsls	r2, r3, #5
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
 8001fb8:	4413      	add	r3, r2
 8001fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	0cdb      	lsrs	r3, r3, #19
 8001fc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fc6:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	212c      	movs	r1, #44	; 0x2c
 8001fce:	fb01 f303 	mul.w	r3, r1, r3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	3340      	adds	r3, #64	; 0x40
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	461a      	mov	r2, r3
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d13c      	bne.n	800205a <HCD_RXQLVL_IRQHandler+0x19a>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d039      	beq.n	800205a <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	015a      	lsls	r2, r3, #5
 8001fea:	6a3b      	ldr	r3, [r7, #32]
 8001fec:	4413      	add	r3, r2
 8001fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001ffc:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002004:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	015a      	lsls	r2, r3, #5
 800200a:	6a3b      	ldr	r3, [r7, #32]
 800200c:	4413      	add	r3, r2
 800200e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002012:	461a      	mov	r2, r3
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	212c      	movs	r1, #44	; 0x2c
 800201e:	fb01 f303 	mul.w	r3, r1, r3
 8002022:	4413      	add	r3, r2
 8002024:	3354      	adds	r3, #84	; 0x54
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	f083 0301 	eor.w	r3, r3, #1
 800202c:	b2d8      	uxtb	r0, r3
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	212c      	movs	r1, #44	; 0x2c
 8002034:	fb01 f303 	mul.w	r3, r1, r3
 8002038:	4413      	add	r3, r2
 800203a:	3354      	adds	r3, #84	; 0x54
 800203c:	4602      	mov	r2, r0
 800203e:	701a      	strb	r2, [r3, #0]
      break;
 8002040:	e00b      	b.n	800205a <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	212c      	movs	r1, #44	; 0x2c
 8002048:	fb01 f303 	mul.w	r3, r1, r3
 800204c:	4413      	add	r3, r2
 800204e:	3360      	adds	r3, #96	; 0x60
 8002050:	2204      	movs	r2, #4
 8002052:	701a      	strb	r2, [r3, #0]
      break;
 8002054:	e001      	b.n	800205a <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002056:	bf00      	nop
 8002058:	e000      	b.n	800205c <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800205a:	bf00      	nop
  }
}
 800205c:	bf00      	nop
 800205e:	3728      	adds	r7, #40	; 0x28
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002090:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b02      	cmp	r3, #2
 800209a:	d10b      	bne.n	80020b4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d102      	bne.n	80020ac <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 fbd5 	bl	8002856 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	f043 0302 	orr.w	r3, r3, #2
 80020b2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b08      	cmp	r3, #8
 80020bc:	d132      	bne.n	8002124 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	f043 0308 	orr.w	r3, r3, #8
 80020c4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b04      	cmp	r3, #4
 80020ce:	d126      	bne.n	800211e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d113      	bne.n	8002100 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80020de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80020e2:	d106      	bne.n	80020f2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2102      	movs	r1, #2
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 f92d 	bl	800234a <USB_InitFSLSPClkSel>
 80020f0:	e011      	b.n	8002116 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2101      	movs	r1, #1
 80020f8:	4618      	mov	r0, r3
 80020fa:	f000 f926 	bl	800234a <USB_InitFSLSPClkSel>
 80020fe:	e00a      	b.n	8002116 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d106      	bne.n	8002116 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800210e:	461a      	mov	r2, r3
 8002110:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002114:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 fbc7 	bl	80028aa <HAL_HCD_PortEnabled_Callback>
 800211c:	e002      	b.n	8002124 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 fbd1 	bl	80028c6 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f003 0320 	and.w	r3, r3, #32
 800212a:	2b20      	cmp	r3, #32
 800212c:	d103      	bne.n	8002136 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	f043 0320 	orr.w	r3, r3, #32
 8002134:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800213c:	461a      	mov	r2, r3
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	6013      	str	r3, [r2, #0]
}
 8002142:	bf00      	nop
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f043 0201 	orr.w	r2, r3, #1
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f023 0201 	bic.w	r2, r3, #1
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
	...

08002190 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	3301      	adds	r3, #1
 80021a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	4a13      	ldr	r2, [pc, #76]	; (80021f4 <USB_FlushTxFifo+0x64>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d901      	bls.n	80021b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e01b      	b.n	80021e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	daf2      	bge.n	800219e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	019b      	lsls	r3, r3, #6
 80021c0:	f043 0220 	orr.w	r2, r3, #32
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	3301      	adds	r3, #1
 80021cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	4a08      	ldr	r2, [pc, #32]	; (80021f4 <USB_FlushTxFifo+0x64>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d901      	bls.n	80021da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e006      	b.n	80021e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	f003 0320 	and.w	r3, r3, #32
 80021e2:	2b20      	cmp	r3, #32
 80021e4:	d0f0      	beq.n	80021c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3714      	adds	r7, #20
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	00030d40 	.word	0x00030d40

080021f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002200:	2300      	movs	r3, #0
 8002202:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	3301      	adds	r3, #1
 8002208:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	4a11      	ldr	r2, [pc, #68]	; (8002254 <USB_FlushRxFifo+0x5c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d901      	bls.n	8002216 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e018      	b.n	8002248 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	2b00      	cmp	r3, #0
 800221c:	daf2      	bge.n	8002204 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800221e:	2300      	movs	r3, #0
 8002220:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2210      	movs	r2, #16
 8002226:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	3301      	adds	r3, #1
 800222c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	4a08      	ldr	r2, [pc, #32]	; (8002254 <USB_FlushRxFifo+0x5c>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d901      	bls.n	800223a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e006      	b.n	8002248 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	f003 0310 	and.w	r3, r3, #16
 8002242:	2b10      	cmp	r3, #16
 8002244:	d0f0      	beq.n	8002228 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	00030d40 	.word	0x00030d40

08002258 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8002258:	b480      	push	{r7}
 800225a:	b08b      	sub	sp, #44	; 0x2c
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	4613      	mov	r3, r2
 8002264:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800226e:	88fb      	ldrh	r3, [r7, #6]
 8002270:	089b      	lsrs	r3, r3, #2
 8002272:	b29b      	uxth	r3, r3
 8002274:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8002276:	88fb      	ldrh	r3, [r7, #6]
 8002278:	f003 0303 	and.w	r3, r3, #3
 800227c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800227e:	2300      	movs	r3, #0
 8002280:	623b      	str	r3, [r7, #32]
 8002282:	e014      	b.n	80022ae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228e:	601a      	str	r2, [r3, #0]
    pDest++;
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	3301      	adds	r3, #1
 8002294:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	3301      	adds	r3, #1
 800229a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229e:	3301      	adds	r3, #1
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	3301      	adds	r3, #1
 80022a6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80022a8:	6a3b      	ldr	r3, [r7, #32]
 80022aa:	3301      	adds	r3, #1
 80022ac:	623b      	str	r3, [r7, #32]
 80022ae:	6a3a      	ldr	r2, [r7, #32]
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d3e6      	bcc.n	8002284 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80022b6:	8bfb      	ldrh	r3, [r7, #30]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d01e      	beq.n	80022fa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80022bc:	2300      	movs	r3, #0
 80022be:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022c6:	461a      	mov	r2, r3
 80022c8:	f107 0310 	add.w	r3, r7, #16
 80022cc:	6812      	ldr	r2, [r2, #0]
 80022ce:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	6a3b      	ldr	r3, [r7, #32]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	fa22 f303 	lsr.w	r3, r2, r3
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e0:	701a      	strb	r2, [r3, #0]
      i++;
 80022e2:	6a3b      	ldr	r3, [r7, #32]
 80022e4:	3301      	adds	r3, #1
 80022e6:	623b      	str	r3, [r7, #32]
      pDest++;
 80022e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ea:	3301      	adds	r3, #1
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80022ee:	8bfb      	ldrh	r3, [r7, #30]
 80022f0:	3b01      	subs	r3, #1
 80022f2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80022f4:	8bfb      	ldrh	r3, [r7, #30]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1ea      	bne.n	80022d0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	372c      	adds	r7, #44	; 0x2c
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	4013      	ands	r3, r2
 800231e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8002320:	68fb      	ldr	r3, [r7, #12]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	f003 0301 	and.w	r3, r3, #1
}
 800233e:	4618      	mov	r0, r3
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800234a:	b480      	push	{r7}
 800234c:	b085      	sub	sp, #20
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
 8002352:	460b      	mov	r3, r1
 8002354:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002368:	f023 0303 	bic.w	r3, r3, #3
 800236c:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	78fb      	ldrb	r3, [r7, #3]
 8002378:	f003 0303 	and.w	r3, r3, #3
 800237c:	68f9      	ldr	r1, [r7, #12]
 800237e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002382:	4313      	orrs	r3, r2
 8002384:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8002386:	78fb      	ldrb	r3, [r7, #3]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d107      	bne.n	800239c <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002392:	461a      	mov	r2, r3
 8002394:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8002398:	6053      	str	r3, [r2, #4]
 800239a:	e009      	b.n	80023b0 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800239c:	78fb      	ldrb	r3, [r7, #3]
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d106      	bne.n	80023b0 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023a8:	461a      	mov	r2, r3
 80023aa:	f241 7370 	movw	r3, #6000	; 0x1770
 80023ae:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80023be:	b480      	push	{r7}
 80023c0:	b085      	sub	sp, #20
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	b29b      	uxth	r3, r3
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b089      	sub	sp, #36	; 0x24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80023f0:	78fb      	ldrb	r3, [r7, #3]
 80023f2:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	015a      	lsls	r2, r3, #5
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	4413      	add	r3, r2
 8002400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	0c9b      	lsrs	r3, r3, #18
 8002408:	f003 0303 	and.w	r3, r3, #3
 800240c:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	015a      	lsls	r2, r3, #5
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	4413      	add	r3, r2
 8002416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	0fdb      	lsrs	r3, r3, #31
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 0320 	and.w	r3, r3, #32
 800242c:	2b20      	cmp	r3, #32
 800242e:	d104      	bne.n	800243a <USB_HC_Halt+0x5a>
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	e0c8      	b.n	80025cc <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d002      	beq.n	8002446 <USB_HC_Halt+0x66>
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	2b02      	cmp	r3, #2
 8002444:	d163      	bne.n	800250e <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	015a      	lsls	r2, r3, #5
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	4413      	add	r3, r2
 800244e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	0151      	lsls	r1, r2, #5
 8002458:	69fa      	ldr	r2, [r7, #28]
 800245a:	440a      	add	r2, r1
 800245c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002460:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002464:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 0320 	and.w	r3, r3, #32
 800246e:	2b00      	cmp	r3, #0
 8002470:	f040 80ab 	bne.w	80025ca <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002478:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d133      	bne.n	80024e8 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	015a      	lsls	r2, r3, #5
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	4413      	add	r3, r2
 8002488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	0151      	lsls	r1, r2, #5
 8002492:	69fa      	ldr	r2, [r7, #28]
 8002494:	440a      	add	r2, r1
 8002496:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800249a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800249e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	015a      	lsls	r2, r3, #5
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	4413      	add	r3, r2
 80024a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	0151      	lsls	r1, r2, #5
 80024b2:	69fa      	ldr	r2, [r7, #28]
 80024b4:	440a      	add	r2, r1
 80024b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024be:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	3301      	adds	r3, #1
 80024c4:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024cc:	d81d      	bhi.n	800250a <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	015a      	lsls	r2, r3, #5
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	4413      	add	r3, r2
 80024d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80024e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024e4:	d0ec      	beq.n	80024c0 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80024e6:	e070      	b.n	80025ca <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	015a      	lsls	r2, r3, #5
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	4413      	add	r3, r2
 80024f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	0151      	lsls	r1, r2, #5
 80024fa:	69fa      	ldr	r2, [r7, #28]
 80024fc:	440a      	add	r2, r1
 80024fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002502:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002506:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002508:	e05f      	b.n	80025ca <USB_HC_Halt+0x1ea>
            break;
 800250a:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800250c:	e05d      	b.n	80025ca <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	015a      	lsls	r2, r3, #5
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	4413      	add	r3, r2
 8002516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	0151      	lsls	r1, r2, #5
 8002520:	69fa      	ldr	r2, [r7, #28]
 8002522:	440a      	add	r2, r1
 8002524:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002528:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800252c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d133      	bne.n	80025a6 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	015a      	lsls	r2, r3, #5
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	4413      	add	r3, r2
 8002546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	0151      	lsls	r1, r2, #5
 8002550:	69fa      	ldr	r2, [r7, #28]
 8002552:	440a      	add	r2, r1
 8002554:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002558:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800255c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	015a      	lsls	r2, r3, #5
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	4413      	add	r3, r2
 8002566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	0151      	lsls	r1, r2, #5
 8002570:	69fa      	ldr	r2, [r7, #28]
 8002572:	440a      	add	r2, r1
 8002574:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002578:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800257c:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	3301      	adds	r3, #1
 8002582:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800258a:	d81d      	bhi.n	80025c8 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	015a      	lsls	r2, r3, #5
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	4413      	add	r3, r2
 8002594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800259e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025a2:	d0ec      	beq.n	800257e <USB_HC_Halt+0x19e>
 80025a4:	e011      	b.n	80025ca <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	015a      	lsls	r2, r3, #5
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	4413      	add	r3, r2
 80025ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	0151      	lsls	r1, r2, #5
 80025b8:	69fa      	ldr	r2, [r7, #28]
 80025ba:	440a      	add	r2, r1
 80025bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	e000      	b.n	80025ca <USB_HC_Halt+0x1ea>
          break;
 80025c8:	bf00      	nop
    }
  }

  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3724      	adds	r7, #36	; 0x24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b088      	sub	sp, #32
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80025e0:	2300      	movs	r3, #0
 80025e2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80025e8:	2300      	movs	r3, #0
 80025ea:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f7ff fdbd 	bl	800216c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80025f2:	2110      	movs	r1, #16
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7ff fdcb 	bl	8002190 <USB_FlushTxFifo>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f7ff fdf7 	bl	80021f8 <USB_FlushRxFifo>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8002614:	2300      	movs	r3, #0
 8002616:	61bb      	str	r3, [r7, #24]
 8002618:	e01f      	b.n	800265a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	015a      	lsls	r2, r3, #5
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	4413      	add	r3, r2
 8002622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002630:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002638:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002640:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	015a      	lsls	r2, r3, #5
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	4413      	add	r3, r2
 800264a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264e:	461a      	mov	r2, r3
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	3301      	adds	r3, #1
 8002658:	61bb      	str	r3, [r7, #24]
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	2b0f      	cmp	r3, #15
 800265e:	d9dc      	bls.n	800261a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8002660:	2300      	movs	r3, #0
 8002662:	61bb      	str	r3, [r7, #24]
 8002664:	e034      	b.n	80026d0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	015a      	lsls	r2, r3, #5
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	4413      	add	r3, r2
 800266e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800267c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002684:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800268c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	015a      	lsls	r2, r3, #5
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	4413      	add	r3, r2
 8002696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800269a:	461a      	mov	r2, r3
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	3301      	adds	r3, #1
 80026a4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026ac:	d80c      	bhi.n	80026c8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	015a      	lsls	r2, r3, #5
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	4413      	add	r3, r2
 80026b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80026c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026c4:	d0ec      	beq.n	80026a0 <USB_StopHost+0xc8>
 80026c6:	e000      	b.n	80026ca <USB_StopHost+0xf2>
        break;
 80026c8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	3301      	adds	r3, #1
 80026ce:	61bb      	str	r3, [r7, #24]
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	2b0f      	cmp	r3, #15
 80026d4:	d9c7      	bls.n	8002666 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026dc:	461a      	mov	r2, r3
 80026de:	f04f 33ff 	mov.w	r3, #4294967295
 80026e2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f04f 32ff 	mov.w	r2, #4294967295
 80026ea:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f7ff fd2c 	bl	800214a <USB_EnableGlobalInt>

  return ret;
 80026f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3720      	adds	r7, #32
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800270a:	1c5a      	adds	r2, r3, #1
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f804 	bl	8002720 <USBH_HandleSof>
}
 8002718:	bf00      	nop
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b0b      	cmp	r3, #11
 8002730:	d10a      	bne.n	8002748 <USBH_HandleSof+0x28>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8002738:	2b00      	cmp	r3, #0
 800273a:	d005      	beq.n	8002748 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	4798      	blx	r3
  }
}
 8002748:	bf00      	nop
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8002760:	bf00      	nop
}
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800277c:	bf00      	nop
}
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b082      	sub	sp, #8
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f883 	bl	80028e2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	791b      	ldrb	r3, [r3, #4]
 80027e0:	4619      	mov	r1, r3
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f80b 	bl	80027fe <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	795b      	ldrb	r3, [r3, #5]
 80027ec:	4619      	mov	r1, r3
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f805 	bl	80027fe <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
 8002806:	460b      	mov	r3, r1
 8002808:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800280a:	78fb      	ldrb	r3, [r7, #3]
 800280c:	2b0f      	cmp	r3, #15
 800280e:	d80d      	bhi.n	800282c <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8002810:	78fb      	ldrb	r3, [r7, #3]
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	33e0      	adds	r3, #224	; 0xe0
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	78fb      	ldrb	r3, [r7, #3]
 800281e:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	33e0      	adds	r3, #224	; 0xe0
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	440b      	add	r3, r1
 800282a:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b082      	sub	sp, #8
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff ff57 	bl	80026fc <USBH_LL_IncTimer>
}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b082      	sub	sp, #8
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff ff8f 	bl	8002788 <USBH_LL_Connect>
}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b082      	sub	sp, #8
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff ff98 	bl	80027b6 <USBH_LL_Disconnect>
}
 8002886:	bf00      	nop
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
 8002896:	460b      	mov	r3, r1
 8002898:	70fb      	strb	r3, [r7, #3]
 800289a:	4613      	mov	r3, r2
 800289c:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800289e:	bf00      	nop
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff ff49 	bl	8002750 <USBH_LL_PortEnabled>
}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b082      	sub	sp, #8
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff ff49 	bl	800276c <USBH_LL_PortDisabled>
}
 80028da:	bf00      	nop
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b084      	sub	sp, #16
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80028ea:	2300      	movs	r3, #0
 80028ec:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80028ee:	2300      	movs	r3, #0
 80028f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7fe fc06 	bl	800110a <HAL_HCD_Stop>
 80028fe:	4603      	mov	r3, r0
 8002900:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8002902:	7bfb      	ldrb	r3, [r7, #15]
 8002904:	4618      	mov	r0, r3
 8002906:	f000 f807 	bl	8002918 <USBH_Get_USB_Status>
 800290a:	4603      	mov	r3, r0
 800290c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800290e:	7bbb      	ldrb	r3, [r7, #14]
}
 8002910:	4618      	mov	r0, r3
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8002922:	2300      	movs	r3, #0
 8002924:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8002926:	79fb      	ldrb	r3, [r7, #7]
 8002928:	2b03      	cmp	r3, #3
 800292a:	d817      	bhi.n	800295c <USBH_Get_USB_Status+0x44>
 800292c:	a201      	add	r2, pc, #4	; (adr r2, 8002934 <USBH_Get_USB_Status+0x1c>)
 800292e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002932:	bf00      	nop
 8002934:	08002945 	.word	0x08002945
 8002938:	0800294b 	.word	0x0800294b
 800293c:	08002951 	.word	0x08002951
 8002940:	08002957 	.word	0x08002957
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8002944:	2300      	movs	r3, #0
 8002946:	73fb      	strb	r3, [r7, #15]
    break;
 8002948:	e00b      	b.n	8002962 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800294a:	2302      	movs	r3, #2
 800294c:	73fb      	strb	r3, [r7, #15]
    break;
 800294e:	e008      	b.n	8002962 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8002950:	2301      	movs	r3, #1
 8002952:	73fb      	strb	r3, [r7, #15]
    break;
 8002954:	e005      	b.n	8002962 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8002956:	2302      	movs	r3, #2
 8002958:	73fb      	strb	r3, [r7, #15]
    break;
 800295a:	e002      	b.n	8002962 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800295c:	2302      	movs	r3, #2
 800295e:	73fb      	strb	r3, [r7, #15]
    break;
 8002960:	bf00      	nop
  }
  return usb_status;
 8002962:	7bfb      	ldrb	r3, [r7, #15]
}
 8002964:	4618      	mov	r0, r3
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <__errno>:
 8002970:	4b01      	ldr	r3, [pc, #4]	; (8002978 <__errno+0x8>)
 8002972:	6818      	ldr	r0, [r3, #0]
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	20000004 	.word	0x20000004

0800297c <__libc_init_array>:
 800297c:	b570      	push	{r4, r5, r6, lr}
 800297e:	4d0d      	ldr	r5, [pc, #52]	; (80029b4 <__libc_init_array+0x38>)
 8002980:	4c0d      	ldr	r4, [pc, #52]	; (80029b8 <__libc_init_array+0x3c>)
 8002982:	1b64      	subs	r4, r4, r5
 8002984:	10a4      	asrs	r4, r4, #2
 8002986:	2600      	movs	r6, #0
 8002988:	42a6      	cmp	r6, r4
 800298a:	d109      	bne.n	80029a0 <__libc_init_array+0x24>
 800298c:	4d0b      	ldr	r5, [pc, #44]	; (80029bc <__libc_init_array+0x40>)
 800298e:	4c0c      	ldr	r4, [pc, #48]	; (80029c0 <__libc_init_array+0x44>)
 8002990:	f001 f8ba 	bl	8003b08 <_init>
 8002994:	1b64      	subs	r4, r4, r5
 8002996:	10a4      	asrs	r4, r4, #2
 8002998:	2600      	movs	r6, #0
 800299a:	42a6      	cmp	r6, r4
 800299c:	d105      	bne.n	80029aa <__libc_init_array+0x2e>
 800299e:	bd70      	pop	{r4, r5, r6, pc}
 80029a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80029a4:	4798      	blx	r3
 80029a6:	3601      	adds	r6, #1
 80029a8:	e7ee      	b.n	8002988 <__libc_init_array+0xc>
 80029aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80029ae:	4798      	blx	r3
 80029b0:	3601      	adds	r6, #1
 80029b2:	e7f2      	b.n	800299a <__libc_init_array+0x1e>
 80029b4:	08003c68 	.word	0x08003c68
 80029b8:	08003c68 	.word	0x08003c68
 80029bc:	08003c68 	.word	0x08003c68
 80029c0:	08003c6c 	.word	0x08003c6c

080029c4 <malloc>:
 80029c4:	4b02      	ldr	r3, [pc, #8]	; (80029d0 <malloc+0xc>)
 80029c6:	4601      	mov	r1, r0
 80029c8:	6818      	ldr	r0, [r3, #0]
 80029ca:	f000 b877 	b.w	8002abc <_malloc_r>
 80029ce:	bf00      	nop
 80029d0:	20000004 	.word	0x20000004

080029d4 <memset>:
 80029d4:	4402      	add	r2, r0
 80029d6:	4603      	mov	r3, r0
 80029d8:	4293      	cmp	r3, r2
 80029da:	d100      	bne.n	80029de <memset+0xa>
 80029dc:	4770      	bx	lr
 80029de:	f803 1b01 	strb.w	r1, [r3], #1
 80029e2:	e7f9      	b.n	80029d8 <memset+0x4>

080029e4 <_free_r>:
 80029e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80029e6:	2900      	cmp	r1, #0
 80029e8:	d044      	beq.n	8002a74 <_free_r+0x90>
 80029ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80029ee:	9001      	str	r0, [sp, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f1a1 0404 	sub.w	r4, r1, #4
 80029f6:	bfb8      	it	lt
 80029f8:	18e4      	addlt	r4, r4, r3
 80029fa:	f000 f9ab 	bl	8002d54 <__malloc_lock>
 80029fe:	4a1e      	ldr	r2, [pc, #120]	; (8002a78 <_free_r+0x94>)
 8002a00:	9801      	ldr	r0, [sp, #4]
 8002a02:	6813      	ldr	r3, [r2, #0]
 8002a04:	b933      	cbnz	r3, 8002a14 <_free_r+0x30>
 8002a06:	6063      	str	r3, [r4, #4]
 8002a08:	6014      	str	r4, [r2, #0]
 8002a0a:	b003      	add	sp, #12
 8002a0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002a10:	f000 b9a6 	b.w	8002d60 <__malloc_unlock>
 8002a14:	42a3      	cmp	r3, r4
 8002a16:	d908      	bls.n	8002a2a <_free_r+0x46>
 8002a18:	6825      	ldr	r5, [r4, #0]
 8002a1a:	1961      	adds	r1, r4, r5
 8002a1c:	428b      	cmp	r3, r1
 8002a1e:	bf01      	itttt	eq
 8002a20:	6819      	ldreq	r1, [r3, #0]
 8002a22:	685b      	ldreq	r3, [r3, #4]
 8002a24:	1949      	addeq	r1, r1, r5
 8002a26:	6021      	streq	r1, [r4, #0]
 8002a28:	e7ed      	b.n	8002a06 <_free_r+0x22>
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	b10b      	cbz	r3, 8002a34 <_free_r+0x50>
 8002a30:	42a3      	cmp	r3, r4
 8002a32:	d9fa      	bls.n	8002a2a <_free_r+0x46>
 8002a34:	6811      	ldr	r1, [r2, #0]
 8002a36:	1855      	adds	r5, r2, r1
 8002a38:	42a5      	cmp	r5, r4
 8002a3a:	d10b      	bne.n	8002a54 <_free_r+0x70>
 8002a3c:	6824      	ldr	r4, [r4, #0]
 8002a3e:	4421      	add	r1, r4
 8002a40:	1854      	adds	r4, r2, r1
 8002a42:	42a3      	cmp	r3, r4
 8002a44:	6011      	str	r1, [r2, #0]
 8002a46:	d1e0      	bne.n	8002a0a <_free_r+0x26>
 8002a48:	681c      	ldr	r4, [r3, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	6053      	str	r3, [r2, #4]
 8002a4e:	4421      	add	r1, r4
 8002a50:	6011      	str	r1, [r2, #0]
 8002a52:	e7da      	b.n	8002a0a <_free_r+0x26>
 8002a54:	d902      	bls.n	8002a5c <_free_r+0x78>
 8002a56:	230c      	movs	r3, #12
 8002a58:	6003      	str	r3, [r0, #0]
 8002a5a:	e7d6      	b.n	8002a0a <_free_r+0x26>
 8002a5c:	6825      	ldr	r5, [r4, #0]
 8002a5e:	1961      	adds	r1, r4, r5
 8002a60:	428b      	cmp	r3, r1
 8002a62:	bf04      	itt	eq
 8002a64:	6819      	ldreq	r1, [r3, #0]
 8002a66:	685b      	ldreq	r3, [r3, #4]
 8002a68:	6063      	str	r3, [r4, #4]
 8002a6a:	bf04      	itt	eq
 8002a6c:	1949      	addeq	r1, r1, r5
 8002a6e:	6021      	streq	r1, [r4, #0]
 8002a70:	6054      	str	r4, [r2, #4]
 8002a72:	e7ca      	b.n	8002a0a <_free_r+0x26>
 8002a74:	b003      	add	sp, #12
 8002a76:	bd30      	pop	{r4, r5, pc}
 8002a78:	20000390 	.word	0x20000390

08002a7c <sbrk_aligned>:
 8002a7c:	b570      	push	{r4, r5, r6, lr}
 8002a7e:	4e0e      	ldr	r6, [pc, #56]	; (8002ab8 <sbrk_aligned+0x3c>)
 8002a80:	460c      	mov	r4, r1
 8002a82:	6831      	ldr	r1, [r6, #0]
 8002a84:	4605      	mov	r5, r0
 8002a86:	b911      	cbnz	r1, 8002a8e <sbrk_aligned+0x12>
 8002a88:	f000 f8f8 	bl	8002c7c <_sbrk_r>
 8002a8c:	6030      	str	r0, [r6, #0]
 8002a8e:	4621      	mov	r1, r4
 8002a90:	4628      	mov	r0, r5
 8002a92:	f000 f8f3 	bl	8002c7c <_sbrk_r>
 8002a96:	1c43      	adds	r3, r0, #1
 8002a98:	d00a      	beq.n	8002ab0 <sbrk_aligned+0x34>
 8002a9a:	1cc4      	adds	r4, r0, #3
 8002a9c:	f024 0403 	bic.w	r4, r4, #3
 8002aa0:	42a0      	cmp	r0, r4
 8002aa2:	d007      	beq.n	8002ab4 <sbrk_aligned+0x38>
 8002aa4:	1a21      	subs	r1, r4, r0
 8002aa6:	4628      	mov	r0, r5
 8002aa8:	f000 f8e8 	bl	8002c7c <_sbrk_r>
 8002aac:	3001      	adds	r0, #1
 8002aae:	d101      	bne.n	8002ab4 <sbrk_aligned+0x38>
 8002ab0:	f04f 34ff 	mov.w	r4, #4294967295
 8002ab4:	4620      	mov	r0, r4
 8002ab6:	bd70      	pop	{r4, r5, r6, pc}
 8002ab8:	20000394 	.word	0x20000394

08002abc <_malloc_r>:
 8002abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ac0:	1ccd      	adds	r5, r1, #3
 8002ac2:	f025 0503 	bic.w	r5, r5, #3
 8002ac6:	3508      	adds	r5, #8
 8002ac8:	2d0c      	cmp	r5, #12
 8002aca:	bf38      	it	cc
 8002acc:	250c      	movcc	r5, #12
 8002ace:	2d00      	cmp	r5, #0
 8002ad0:	4607      	mov	r7, r0
 8002ad2:	db01      	blt.n	8002ad8 <_malloc_r+0x1c>
 8002ad4:	42a9      	cmp	r1, r5
 8002ad6:	d905      	bls.n	8002ae4 <_malloc_r+0x28>
 8002ad8:	230c      	movs	r3, #12
 8002ada:	603b      	str	r3, [r7, #0]
 8002adc:	2600      	movs	r6, #0
 8002ade:	4630      	mov	r0, r6
 8002ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ae4:	4e2e      	ldr	r6, [pc, #184]	; (8002ba0 <_malloc_r+0xe4>)
 8002ae6:	f000 f935 	bl	8002d54 <__malloc_lock>
 8002aea:	6833      	ldr	r3, [r6, #0]
 8002aec:	461c      	mov	r4, r3
 8002aee:	bb34      	cbnz	r4, 8002b3e <_malloc_r+0x82>
 8002af0:	4629      	mov	r1, r5
 8002af2:	4638      	mov	r0, r7
 8002af4:	f7ff ffc2 	bl	8002a7c <sbrk_aligned>
 8002af8:	1c43      	adds	r3, r0, #1
 8002afa:	4604      	mov	r4, r0
 8002afc:	d14d      	bne.n	8002b9a <_malloc_r+0xde>
 8002afe:	6834      	ldr	r4, [r6, #0]
 8002b00:	4626      	mov	r6, r4
 8002b02:	2e00      	cmp	r6, #0
 8002b04:	d140      	bne.n	8002b88 <_malloc_r+0xcc>
 8002b06:	6823      	ldr	r3, [r4, #0]
 8002b08:	4631      	mov	r1, r6
 8002b0a:	4638      	mov	r0, r7
 8002b0c:	eb04 0803 	add.w	r8, r4, r3
 8002b10:	f000 f8b4 	bl	8002c7c <_sbrk_r>
 8002b14:	4580      	cmp	r8, r0
 8002b16:	d13a      	bne.n	8002b8e <_malloc_r+0xd2>
 8002b18:	6821      	ldr	r1, [r4, #0]
 8002b1a:	3503      	adds	r5, #3
 8002b1c:	1a6d      	subs	r5, r5, r1
 8002b1e:	f025 0503 	bic.w	r5, r5, #3
 8002b22:	3508      	adds	r5, #8
 8002b24:	2d0c      	cmp	r5, #12
 8002b26:	bf38      	it	cc
 8002b28:	250c      	movcc	r5, #12
 8002b2a:	4629      	mov	r1, r5
 8002b2c:	4638      	mov	r0, r7
 8002b2e:	f7ff ffa5 	bl	8002a7c <sbrk_aligned>
 8002b32:	3001      	adds	r0, #1
 8002b34:	d02b      	beq.n	8002b8e <_malloc_r+0xd2>
 8002b36:	6823      	ldr	r3, [r4, #0]
 8002b38:	442b      	add	r3, r5
 8002b3a:	6023      	str	r3, [r4, #0]
 8002b3c:	e00e      	b.n	8002b5c <_malloc_r+0xa0>
 8002b3e:	6822      	ldr	r2, [r4, #0]
 8002b40:	1b52      	subs	r2, r2, r5
 8002b42:	d41e      	bmi.n	8002b82 <_malloc_r+0xc6>
 8002b44:	2a0b      	cmp	r2, #11
 8002b46:	d916      	bls.n	8002b76 <_malloc_r+0xba>
 8002b48:	1961      	adds	r1, r4, r5
 8002b4a:	42a3      	cmp	r3, r4
 8002b4c:	6025      	str	r5, [r4, #0]
 8002b4e:	bf18      	it	ne
 8002b50:	6059      	strne	r1, [r3, #4]
 8002b52:	6863      	ldr	r3, [r4, #4]
 8002b54:	bf08      	it	eq
 8002b56:	6031      	streq	r1, [r6, #0]
 8002b58:	5162      	str	r2, [r4, r5]
 8002b5a:	604b      	str	r3, [r1, #4]
 8002b5c:	4638      	mov	r0, r7
 8002b5e:	f104 060b 	add.w	r6, r4, #11
 8002b62:	f000 f8fd 	bl	8002d60 <__malloc_unlock>
 8002b66:	f026 0607 	bic.w	r6, r6, #7
 8002b6a:	1d23      	adds	r3, r4, #4
 8002b6c:	1af2      	subs	r2, r6, r3
 8002b6e:	d0b6      	beq.n	8002ade <_malloc_r+0x22>
 8002b70:	1b9b      	subs	r3, r3, r6
 8002b72:	50a3      	str	r3, [r4, r2]
 8002b74:	e7b3      	b.n	8002ade <_malloc_r+0x22>
 8002b76:	6862      	ldr	r2, [r4, #4]
 8002b78:	42a3      	cmp	r3, r4
 8002b7a:	bf0c      	ite	eq
 8002b7c:	6032      	streq	r2, [r6, #0]
 8002b7e:	605a      	strne	r2, [r3, #4]
 8002b80:	e7ec      	b.n	8002b5c <_malloc_r+0xa0>
 8002b82:	4623      	mov	r3, r4
 8002b84:	6864      	ldr	r4, [r4, #4]
 8002b86:	e7b2      	b.n	8002aee <_malloc_r+0x32>
 8002b88:	4634      	mov	r4, r6
 8002b8a:	6876      	ldr	r6, [r6, #4]
 8002b8c:	e7b9      	b.n	8002b02 <_malloc_r+0x46>
 8002b8e:	230c      	movs	r3, #12
 8002b90:	603b      	str	r3, [r7, #0]
 8002b92:	4638      	mov	r0, r7
 8002b94:	f000 f8e4 	bl	8002d60 <__malloc_unlock>
 8002b98:	e7a1      	b.n	8002ade <_malloc_r+0x22>
 8002b9a:	6025      	str	r5, [r4, #0]
 8002b9c:	e7de      	b.n	8002b5c <_malloc_r+0xa0>
 8002b9e:	bf00      	nop
 8002ba0:	20000390 	.word	0x20000390

08002ba4 <srand>:
 8002ba4:	b538      	push	{r3, r4, r5, lr}
 8002ba6:	4b10      	ldr	r3, [pc, #64]	; (8002be8 <srand+0x44>)
 8002ba8:	681d      	ldr	r5, [r3, #0]
 8002baa:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002bac:	4604      	mov	r4, r0
 8002bae:	b9b3      	cbnz	r3, 8002bde <srand+0x3a>
 8002bb0:	2018      	movs	r0, #24
 8002bb2:	f7ff ff07 	bl	80029c4 <malloc>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	63a8      	str	r0, [r5, #56]	; 0x38
 8002bba:	b920      	cbnz	r0, 8002bc6 <srand+0x22>
 8002bbc:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <srand+0x48>)
 8002bbe:	480c      	ldr	r0, [pc, #48]	; (8002bf0 <srand+0x4c>)
 8002bc0:	2142      	movs	r1, #66	; 0x42
 8002bc2:	f000 f885 	bl	8002cd0 <__assert_func>
 8002bc6:	490b      	ldr	r1, [pc, #44]	; (8002bf4 <srand+0x50>)
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <srand+0x54>)
 8002bca:	e9c0 1300 	strd	r1, r3, [r0]
 8002bce:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <srand+0x58>)
 8002bd0:	6083      	str	r3, [r0, #8]
 8002bd2:	230b      	movs	r3, #11
 8002bd4:	8183      	strh	r3, [r0, #12]
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	2001      	movs	r0, #1
 8002bda:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002bde:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002be0:	2200      	movs	r2, #0
 8002be2:	611c      	str	r4, [r3, #16]
 8002be4:	615a      	str	r2, [r3, #20]
 8002be6:	bd38      	pop	{r3, r4, r5, pc}
 8002be8:	20000004 	.word	0x20000004
 8002bec:	08003b24 	.word	0x08003b24
 8002bf0:	08003b3b 	.word	0x08003b3b
 8002bf4:	abcd330e 	.word	0xabcd330e
 8002bf8:	e66d1234 	.word	0xe66d1234
 8002bfc:	0005deec 	.word	0x0005deec

08002c00 <rand>:
 8002c00:	4b16      	ldr	r3, [pc, #88]	; (8002c5c <rand+0x5c>)
 8002c02:	b510      	push	{r4, lr}
 8002c04:	681c      	ldr	r4, [r3, #0]
 8002c06:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002c08:	b9b3      	cbnz	r3, 8002c38 <rand+0x38>
 8002c0a:	2018      	movs	r0, #24
 8002c0c:	f7ff feda 	bl	80029c4 <malloc>
 8002c10:	63a0      	str	r0, [r4, #56]	; 0x38
 8002c12:	b928      	cbnz	r0, 8002c20 <rand+0x20>
 8002c14:	4602      	mov	r2, r0
 8002c16:	4b12      	ldr	r3, [pc, #72]	; (8002c60 <rand+0x60>)
 8002c18:	4812      	ldr	r0, [pc, #72]	; (8002c64 <rand+0x64>)
 8002c1a:	214e      	movs	r1, #78	; 0x4e
 8002c1c:	f000 f858 	bl	8002cd0 <__assert_func>
 8002c20:	4a11      	ldr	r2, [pc, #68]	; (8002c68 <rand+0x68>)
 8002c22:	4b12      	ldr	r3, [pc, #72]	; (8002c6c <rand+0x6c>)
 8002c24:	e9c0 2300 	strd	r2, r3, [r0]
 8002c28:	4b11      	ldr	r3, [pc, #68]	; (8002c70 <rand+0x70>)
 8002c2a:	6083      	str	r3, [r0, #8]
 8002c2c:	230b      	movs	r3, #11
 8002c2e:	8183      	strh	r3, [r0, #12]
 8002c30:	2201      	movs	r2, #1
 8002c32:	2300      	movs	r3, #0
 8002c34:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8002c38:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8002c3a:	4a0e      	ldr	r2, [pc, #56]	; (8002c74 <rand+0x74>)
 8002c3c:	6920      	ldr	r0, [r4, #16]
 8002c3e:	6963      	ldr	r3, [r4, #20]
 8002c40:	490d      	ldr	r1, [pc, #52]	; (8002c78 <rand+0x78>)
 8002c42:	4342      	muls	r2, r0
 8002c44:	fb01 2203 	mla	r2, r1, r3, r2
 8002c48:	fba0 0101 	umull	r0, r1, r0, r1
 8002c4c:	1c43      	adds	r3, r0, #1
 8002c4e:	eb42 0001 	adc.w	r0, r2, r1
 8002c52:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8002c56:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002c5a:	bd10      	pop	{r4, pc}
 8002c5c:	20000004 	.word	0x20000004
 8002c60:	08003b24 	.word	0x08003b24
 8002c64:	08003b3b 	.word	0x08003b3b
 8002c68:	abcd330e 	.word	0xabcd330e
 8002c6c:	e66d1234 	.word	0xe66d1234
 8002c70:	0005deec 	.word	0x0005deec
 8002c74:	5851f42d 	.word	0x5851f42d
 8002c78:	4c957f2d 	.word	0x4c957f2d

08002c7c <_sbrk_r>:
 8002c7c:	b538      	push	{r3, r4, r5, lr}
 8002c7e:	4d06      	ldr	r5, [pc, #24]	; (8002c98 <_sbrk_r+0x1c>)
 8002c80:	2300      	movs	r3, #0
 8002c82:	4604      	mov	r4, r0
 8002c84:	4608      	mov	r0, r1
 8002c86:	602b      	str	r3, [r5, #0]
 8002c88:	f7fe f8ae 	bl	8000de8 <_sbrk>
 8002c8c:	1c43      	adds	r3, r0, #1
 8002c8e:	d102      	bne.n	8002c96 <_sbrk_r+0x1a>
 8002c90:	682b      	ldr	r3, [r5, #0]
 8002c92:	b103      	cbz	r3, 8002c96 <_sbrk_r+0x1a>
 8002c94:	6023      	str	r3, [r4, #0]
 8002c96:	bd38      	pop	{r3, r4, r5, pc}
 8002c98:	20000398 	.word	0x20000398

08002c9c <time>:
 8002c9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002c9e:	4b0b      	ldr	r3, [pc, #44]	; (8002ccc <time+0x30>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	4669      	mov	r1, sp
 8002ca4:	4604      	mov	r4, r0
 8002ca6:	6818      	ldr	r0, [r3, #0]
 8002ca8:	f000 f842 	bl	8002d30 <_gettimeofday_r>
 8002cac:	2800      	cmp	r0, #0
 8002cae:	bfbe      	ittt	lt
 8002cb0:	f04f 32ff 	movlt.w	r2, #4294967295
 8002cb4:	f04f 33ff 	movlt.w	r3, #4294967295
 8002cb8:	e9cd 2300 	strdlt	r2, r3, [sp]
 8002cbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002cc0:	b10c      	cbz	r4, 8002cc6 <time+0x2a>
 8002cc2:	e9c4 0100 	strd	r0, r1, [r4]
 8002cc6:	b004      	add	sp, #16
 8002cc8:	bd10      	pop	{r4, pc}
 8002cca:	bf00      	nop
 8002ccc:	20000004 	.word	0x20000004

08002cd0 <__assert_func>:
 8002cd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002cd2:	4614      	mov	r4, r2
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <__assert_func+0x2c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4605      	mov	r5, r0
 8002cdc:	68d8      	ldr	r0, [r3, #12]
 8002cde:	b14c      	cbz	r4, 8002cf4 <__assert_func+0x24>
 8002ce0:	4b07      	ldr	r3, [pc, #28]	; (8002d00 <__assert_func+0x30>)
 8002ce2:	9100      	str	r1, [sp, #0]
 8002ce4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002ce8:	4906      	ldr	r1, [pc, #24]	; (8002d04 <__assert_func+0x34>)
 8002cea:	462b      	mov	r3, r5
 8002cec:	f000 f80e 	bl	8002d0c <fiprintf>
 8002cf0:	f000 fbea 	bl	80034c8 <abort>
 8002cf4:	4b04      	ldr	r3, [pc, #16]	; (8002d08 <__assert_func+0x38>)
 8002cf6:	461c      	mov	r4, r3
 8002cf8:	e7f3      	b.n	8002ce2 <__assert_func+0x12>
 8002cfa:	bf00      	nop
 8002cfc:	20000004 	.word	0x20000004
 8002d00:	08003b96 	.word	0x08003b96
 8002d04:	08003ba3 	.word	0x08003ba3
 8002d08:	08003bd1 	.word	0x08003bd1

08002d0c <fiprintf>:
 8002d0c:	b40e      	push	{r1, r2, r3}
 8002d0e:	b503      	push	{r0, r1, lr}
 8002d10:	4601      	mov	r1, r0
 8002d12:	ab03      	add	r3, sp, #12
 8002d14:	4805      	ldr	r0, [pc, #20]	; (8002d2c <fiprintf+0x20>)
 8002d16:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d1a:	6800      	ldr	r0, [r0, #0]
 8002d1c:	9301      	str	r3, [sp, #4]
 8002d1e:	f000 f84f 	bl	8002dc0 <_vfiprintf_r>
 8002d22:	b002      	add	sp, #8
 8002d24:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d28:	b003      	add	sp, #12
 8002d2a:	4770      	bx	lr
 8002d2c:	20000004 	.word	0x20000004

08002d30 <_gettimeofday_r>:
 8002d30:	b538      	push	{r3, r4, r5, lr}
 8002d32:	4d07      	ldr	r5, [pc, #28]	; (8002d50 <_gettimeofday_r+0x20>)
 8002d34:	2300      	movs	r3, #0
 8002d36:	4604      	mov	r4, r0
 8002d38:	4608      	mov	r0, r1
 8002d3a:	4611      	mov	r1, r2
 8002d3c:	602b      	str	r3, [r5, #0]
 8002d3e:	f000 fedb 	bl	8003af8 <_gettimeofday>
 8002d42:	1c43      	adds	r3, r0, #1
 8002d44:	d102      	bne.n	8002d4c <_gettimeofday_r+0x1c>
 8002d46:	682b      	ldr	r3, [r5, #0]
 8002d48:	b103      	cbz	r3, 8002d4c <_gettimeofday_r+0x1c>
 8002d4a:	6023      	str	r3, [r4, #0]
 8002d4c:	bd38      	pop	{r3, r4, r5, pc}
 8002d4e:	bf00      	nop
 8002d50:	20000398 	.word	0x20000398

08002d54 <__malloc_lock>:
 8002d54:	4801      	ldr	r0, [pc, #4]	; (8002d5c <__malloc_lock+0x8>)
 8002d56:	f000 bd77 	b.w	8003848 <__retarget_lock_acquire_recursive>
 8002d5a:	bf00      	nop
 8002d5c:	2000039c 	.word	0x2000039c

08002d60 <__malloc_unlock>:
 8002d60:	4801      	ldr	r0, [pc, #4]	; (8002d68 <__malloc_unlock+0x8>)
 8002d62:	f000 bd72 	b.w	800384a <__retarget_lock_release_recursive>
 8002d66:	bf00      	nop
 8002d68:	2000039c 	.word	0x2000039c

08002d6c <__sfputc_r>:
 8002d6c:	6893      	ldr	r3, [r2, #8]
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	b410      	push	{r4}
 8002d74:	6093      	str	r3, [r2, #8]
 8002d76:	da08      	bge.n	8002d8a <__sfputc_r+0x1e>
 8002d78:	6994      	ldr	r4, [r2, #24]
 8002d7a:	42a3      	cmp	r3, r4
 8002d7c:	db01      	blt.n	8002d82 <__sfputc_r+0x16>
 8002d7e:	290a      	cmp	r1, #10
 8002d80:	d103      	bne.n	8002d8a <__sfputc_r+0x1e>
 8002d82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d86:	f000 badf 	b.w	8003348 <__swbuf_r>
 8002d8a:	6813      	ldr	r3, [r2, #0]
 8002d8c:	1c58      	adds	r0, r3, #1
 8002d8e:	6010      	str	r0, [r2, #0]
 8002d90:	7019      	strb	r1, [r3, #0]
 8002d92:	4608      	mov	r0, r1
 8002d94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <__sfputs_r>:
 8002d9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d9c:	4606      	mov	r6, r0
 8002d9e:	460f      	mov	r7, r1
 8002da0:	4614      	mov	r4, r2
 8002da2:	18d5      	adds	r5, r2, r3
 8002da4:	42ac      	cmp	r4, r5
 8002da6:	d101      	bne.n	8002dac <__sfputs_r+0x12>
 8002da8:	2000      	movs	r0, #0
 8002daa:	e007      	b.n	8002dbc <__sfputs_r+0x22>
 8002dac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002db0:	463a      	mov	r2, r7
 8002db2:	4630      	mov	r0, r6
 8002db4:	f7ff ffda 	bl	8002d6c <__sfputc_r>
 8002db8:	1c43      	adds	r3, r0, #1
 8002dba:	d1f3      	bne.n	8002da4 <__sfputs_r+0xa>
 8002dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002dc0 <_vfiprintf_r>:
 8002dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dc4:	460d      	mov	r5, r1
 8002dc6:	b09d      	sub	sp, #116	; 0x74
 8002dc8:	4614      	mov	r4, r2
 8002dca:	4698      	mov	r8, r3
 8002dcc:	4606      	mov	r6, r0
 8002dce:	b118      	cbz	r0, 8002dd8 <_vfiprintf_r+0x18>
 8002dd0:	6983      	ldr	r3, [r0, #24]
 8002dd2:	b90b      	cbnz	r3, 8002dd8 <_vfiprintf_r+0x18>
 8002dd4:	f000 fc9a 	bl	800370c <__sinit>
 8002dd8:	4b89      	ldr	r3, [pc, #548]	; (8003000 <_vfiprintf_r+0x240>)
 8002dda:	429d      	cmp	r5, r3
 8002ddc:	d11b      	bne.n	8002e16 <_vfiprintf_r+0x56>
 8002dde:	6875      	ldr	r5, [r6, #4]
 8002de0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002de2:	07d9      	lsls	r1, r3, #31
 8002de4:	d405      	bmi.n	8002df2 <_vfiprintf_r+0x32>
 8002de6:	89ab      	ldrh	r3, [r5, #12]
 8002de8:	059a      	lsls	r2, r3, #22
 8002dea:	d402      	bmi.n	8002df2 <_vfiprintf_r+0x32>
 8002dec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002dee:	f000 fd2b 	bl	8003848 <__retarget_lock_acquire_recursive>
 8002df2:	89ab      	ldrh	r3, [r5, #12]
 8002df4:	071b      	lsls	r3, r3, #28
 8002df6:	d501      	bpl.n	8002dfc <_vfiprintf_r+0x3c>
 8002df8:	692b      	ldr	r3, [r5, #16]
 8002dfa:	b9eb      	cbnz	r3, 8002e38 <_vfiprintf_r+0x78>
 8002dfc:	4629      	mov	r1, r5
 8002dfe:	4630      	mov	r0, r6
 8002e00:	f000 faf4 	bl	80033ec <__swsetup_r>
 8002e04:	b1c0      	cbz	r0, 8002e38 <_vfiprintf_r+0x78>
 8002e06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002e08:	07dc      	lsls	r4, r3, #31
 8002e0a:	d50e      	bpl.n	8002e2a <_vfiprintf_r+0x6a>
 8002e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e10:	b01d      	add	sp, #116	; 0x74
 8002e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e16:	4b7b      	ldr	r3, [pc, #492]	; (8003004 <_vfiprintf_r+0x244>)
 8002e18:	429d      	cmp	r5, r3
 8002e1a:	d101      	bne.n	8002e20 <_vfiprintf_r+0x60>
 8002e1c:	68b5      	ldr	r5, [r6, #8]
 8002e1e:	e7df      	b.n	8002de0 <_vfiprintf_r+0x20>
 8002e20:	4b79      	ldr	r3, [pc, #484]	; (8003008 <_vfiprintf_r+0x248>)
 8002e22:	429d      	cmp	r5, r3
 8002e24:	bf08      	it	eq
 8002e26:	68f5      	ldreq	r5, [r6, #12]
 8002e28:	e7da      	b.n	8002de0 <_vfiprintf_r+0x20>
 8002e2a:	89ab      	ldrh	r3, [r5, #12]
 8002e2c:	0598      	lsls	r0, r3, #22
 8002e2e:	d4ed      	bmi.n	8002e0c <_vfiprintf_r+0x4c>
 8002e30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002e32:	f000 fd0a 	bl	800384a <__retarget_lock_release_recursive>
 8002e36:	e7e9      	b.n	8002e0c <_vfiprintf_r+0x4c>
 8002e38:	2300      	movs	r3, #0
 8002e3a:	9309      	str	r3, [sp, #36]	; 0x24
 8002e3c:	2320      	movs	r3, #32
 8002e3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002e42:	f8cd 800c 	str.w	r8, [sp, #12]
 8002e46:	2330      	movs	r3, #48	; 0x30
 8002e48:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800300c <_vfiprintf_r+0x24c>
 8002e4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002e50:	f04f 0901 	mov.w	r9, #1
 8002e54:	4623      	mov	r3, r4
 8002e56:	469a      	mov	sl, r3
 8002e58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e5c:	b10a      	cbz	r2, 8002e62 <_vfiprintf_r+0xa2>
 8002e5e:	2a25      	cmp	r2, #37	; 0x25
 8002e60:	d1f9      	bne.n	8002e56 <_vfiprintf_r+0x96>
 8002e62:	ebba 0b04 	subs.w	fp, sl, r4
 8002e66:	d00b      	beq.n	8002e80 <_vfiprintf_r+0xc0>
 8002e68:	465b      	mov	r3, fp
 8002e6a:	4622      	mov	r2, r4
 8002e6c:	4629      	mov	r1, r5
 8002e6e:	4630      	mov	r0, r6
 8002e70:	f7ff ff93 	bl	8002d9a <__sfputs_r>
 8002e74:	3001      	adds	r0, #1
 8002e76:	f000 80aa 	beq.w	8002fce <_vfiprintf_r+0x20e>
 8002e7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e7c:	445a      	add	r2, fp
 8002e7e:	9209      	str	r2, [sp, #36]	; 0x24
 8002e80:	f89a 3000 	ldrb.w	r3, [sl]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 80a2 	beq.w	8002fce <_vfiprintf_r+0x20e>
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e94:	f10a 0a01 	add.w	sl, sl, #1
 8002e98:	9304      	str	r3, [sp, #16]
 8002e9a:	9307      	str	r3, [sp, #28]
 8002e9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002ea0:	931a      	str	r3, [sp, #104]	; 0x68
 8002ea2:	4654      	mov	r4, sl
 8002ea4:	2205      	movs	r2, #5
 8002ea6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002eaa:	4858      	ldr	r0, [pc, #352]	; (800300c <_vfiprintf_r+0x24c>)
 8002eac:	f7fd f990 	bl	80001d0 <memchr>
 8002eb0:	9a04      	ldr	r2, [sp, #16]
 8002eb2:	b9d8      	cbnz	r0, 8002eec <_vfiprintf_r+0x12c>
 8002eb4:	06d1      	lsls	r1, r2, #27
 8002eb6:	bf44      	itt	mi
 8002eb8:	2320      	movmi	r3, #32
 8002eba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ebe:	0713      	lsls	r3, r2, #28
 8002ec0:	bf44      	itt	mi
 8002ec2:	232b      	movmi	r3, #43	; 0x2b
 8002ec4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ec8:	f89a 3000 	ldrb.w	r3, [sl]
 8002ecc:	2b2a      	cmp	r3, #42	; 0x2a
 8002ece:	d015      	beq.n	8002efc <_vfiprintf_r+0x13c>
 8002ed0:	9a07      	ldr	r2, [sp, #28]
 8002ed2:	4654      	mov	r4, sl
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	f04f 0c0a 	mov.w	ip, #10
 8002eda:	4621      	mov	r1, r4
 8002edc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ee0:	3b30      	subs	r3, #48	; 0x30
 8002ee2:	2b09      	cmp	r3, #9
 8002ee4:	d94e      	bls.n	8002f84 <_vfiprintf_r+0x1c4>
 8002ee6:	b1b0      	cbz	r0, 8002f16 <_vfiprintf_r+0x156>
 8002ee8:	9207      	str	r2, [sp, #28]
 8002eea:	e014      	b.n	8002f16 <_vfiprintf_r+0x156>
 8002eec:	eba0 0308 	sub.w	r3, r0, r8
 8002ef0:	fa09 f303 	lsl.w	r3, r9, r3
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	9304      	str	r3, [sp, #16]
 8002ef8:	46a2      	mov	sl, r4
 8002efa:	e7d2      	b.n	8002ea2 <_vfiprintf_r+0xe2>
 8002efc:	9b03      	ldr	r3, [sp, #12]
 8002efe:	1d19      	adds	r1, r3, #4
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	9103      	str	r1, [sp, #12]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	bfbb      	ittet	lt
 8002f08:	425b      	neglt	r3, r3
 8002f0a:	f042 0202 	orrlt.w	r2, r2, #2
 8002f0e:	9307      	strge	r3, [sp, #28]
 8002f10:	9307      	strlt	r3, [sp, #28]
 8002f12:	bfb8      	it	lt
 8002f14:	9204      	strlt	r2, [sp, #16]
 8002f16:	7823      	ldrb	r3, [r4, #0]
 8002f18:	2b2e      	cmp	r3, #46	; 0x2e
 8002f1a:	d10c      	bne.n	8002f36 <_vfiprintf_r+0x176>
 8002f1c:	7863      	ldrb	r3, [r4, #1]
 8002f1e:	2b2a      	cmp	r3, #42	; 0x2a
 8002f20:	d135      	bne.n	8002f8e <_vfiprintf_r+0x1ce>
 8002f22:	9b03      	ldr	r3, [sp, #12]
 8002f24:	1d1a      	adds	r2, r3, #4
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	9203      	str	r2, [sp, #12]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	bfb8      	it	lt
 8002f2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002f32:	3402      	adds	r4, #2
 8002f34:	9305      	str	r3, [sp, #20]
 8002f36:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800301c <_vfiprintf_r+0x25c>
 8002f3a:	7821      	ldrb	r1, [r4, #0]
 8002f3c:	2203      	movs	r2, #3
 8002f3e:	4650      	mov	r0, sl
 8002f40:	f7fd f946 	bl	80001d0 <memchr>
 8002f44:	b140      	cbz	r0, 8002f58 <_vfiprintf_r+0x198>
 8002f46:	2340      	movs	r3, #64	; 0x40
 8002f48:	eba0 000a 	sub.w	r0, r0, sl
 8002f4c:	fa03 f000 	lsl.w	r0, r3, r0
 8002f50:	9b04      	ldr	r3, [sp, #16]
 8002f52:	4303      	orrs	r3, r0
 8002f54:	3401      	adds	r4, #1
 8002f56:	9304      	str	r3, [sp, #16]
 8002f58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f5c:	482c      	ldr	r0, [pc, #176]	; (8003010 <_vfiprintf_r+0x250>)
 8002f5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002f62:	2206      	movs	r2, #6
 8002f64:	f7fd f934 	bl	80001d0 <memchr>
 8002f68:	2800      	cmp	r0, #0
 8002f6a:	d03f      	beq.n	8002fec <_vfiprintf_r+0x22c>
 8002f6c:	4b29      	ldr	r3, [pc, #164]	; (8003014 <_vfiprintf_r+0x254>)
 8002f6e:	bb1b      	cbnz	r3, 8002fb8 <_vfiprintf_r+0x1f8>
 8002f70:	9b03      	ldr	r3, [sp, #12]
 8002f72:	3307      	adds	r3, #7
 8002f74:	f023 0307 	bic.w	r3, r3, #7
 8002f78:	3308      	adds	r3, #8
 8002f7a:	9303      	str	r3, [sp, #12]
 8002f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f7e:	443b      	add	r3, r7
 8002f80:	9309      	str	r3, [sp, #36]	; 0x24
 8002f82:	e767      	b.n	8002e54 <_vfiprintf_r+0x94>
 8002f84:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f88:	460c      	mov	r4, r1
 8002f8a:	2001      	movs	r0, #1
 8002f8c:	e7a5      	b.n	8002eda <_vfiprintf_r+0x11a>
 8002f8e:	2300      	movs	r3, #0
 8002f90:	3401      	adds	r4, #1
 8002f92:	9305      	str	r3, [sp, #20]
 8002f94:	4619      	mov	r1, r3
 8002f96:	f04f 0c0a 	mov.w	ip, #10
 8002f9a:	4620      	mov	r0, r4
 8002f9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002fa0:	3a30      	subs	r2, #48	; 0x30
 8002fa2:	2a09      	cmp	r2, #9
 8002fa4:	d903      	bls.n	8002fae <_vfiprintf_r+0x1ee>
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d0c5      	beq.n	8002f36 <_vfiprintf_r+0x176>
 8002faa:	9105      	str	r1, [sp, #20]
 8002fac:	e7c3      	b.n	8002f36 <_vfiprintf_r+0x176>
 8002fae:	fb0c 2101 	mla	r1, ip, r1, r2
 8002fb2:	4604      	mov	r4, r0
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e7f0      	b.n	8002f9a <_vfiprintf_r+0x1da>
 8002fb8:	ab03      	add	r3, sp, #12
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	462a      	mov	r2, r5
 8002fbe:	4b16      	ldr	r3, [pc, #88]	; (8003018 <_vfiprintf_r+0x258>)
 8002fc0:	a904      	add	r1, sp, #16
 8002fc2:	4630      	mov	r0, r6
 8002fc4:	f3af 8000 	nop.w
 8002fc8:	4607      	mov	r7, r0
 8002fca:	1c78      	adds	r0, r7, #1
 8002fcc:	d1d6      	bne.n	8002f7c <_vfiprintf_r+0x1bc>
 8002fce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002fd0:	07d9      	lsls	r1, r3, #31
 8002fd2:	d405      	bmi.n	8002fe0 <_vfiprintf_r+0x220>
 8002fd4:	89ab      	ldrh	r3, [r5, #12]
 8002fd6:	059a      	lsls	r2, r3, #22
 8002fd8:	d402      	bmi.n	8002fe0 <_vfiprintf_r+0x220>
 8002fda:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002fdc:	f000 fc35 	bl	800384a <__retarget_lock_release_recursive>
 8002fe0:	89ab      	ldrh	r3, [r5, #12]
 8002fe2:	065b      	lsls	r3, r3, #25
 8002fe4:	f53f af12 	bmi.w	8002e0c <_vfiprintf_r+0x4c>
 8002fe8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002fea:	e711      	b.n	8002e10 <_vfiprintf_r+0x50>
 8002fec:	ab03      	add	r3, sp, #12
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	462a      	mov	r2, r5
 8002ff2:	4b09      	ldr	r3, [pc, #36]	; (8003018 <_vfiprintf_r+0x258>)
 8002ff4:	a904      	add	r1, sp, #16
 8002ff6:	4630      	mov	r0, r6
 8002ff8:	f000 f880 	bl	80030fc <_printf_i>
 8002ffc:	e7e4      	b.n	8002fc8 <_vfiprintf_r+0x208>
 8002ffe:	bf00      	nop
 8003000:	08003c28 	.word	0x08003c28
 8003004:	08003c48 	.word	0x08003c48
 8003008:	08003c08 	.word	0x08003c08
 800300c:	08003bd2 	.word	0x08003bd2
 8003010:	08003bdc 	.word	0x08003bdc
 8003014:	00000000 	.word	0x00000000
 8003018:	08002d9b 	.word	0x08002d9b
 800301c:	08003bd8 	.word	0x08003bd8

08003020 <_printf_common>:
 8003020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003024:	4616      	mov	r6, r2
 8003026:	4699      	mov	r9, r3
 8003028:	688a      	ldr	r2, [r1, #8]
 800302a:	690b      	ldr	r3, [r1, #16]
 800302c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003030:	4293      	cmp	r3, r2
 8003032:	bfb8      	it	lt
 8003034:	4613      	movlt	r3, r2
 8003036:	6033      	str	r3, [r6, #0]
 8003038:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800303c:	4607      	mov	r7, r0
 800303e:	460c      	mov	r4, r1
 8003040:	b10a      	cbz	r2, 8003046 <_printf_common+0x26>
 8003042:	3301      	adds	r3, #1
 8003044:	6033      	str	r3, [r6, #0]
 8003046:	6823      	ldr	r3, [r4, #0]
 8003048:	0699      	lsls	r1, r3, #26
 800304a:	bf42      	ittt	mi
 800304c:	6833      	ldrmi	r3, [r6, #0]
 800304e:	3302      	addmi	r3, #2
 8003050:	6033      	strmi	r3, [r6, #0]
 8003052:	6825      	ldr	r5, [r4, #0]
 8003054:	f015 0506 	ands.w	r5, r5, #6
 8003058:	d106      	bne.n	8003068 <_printf_common+0x48>
 800305a:	f104 0a19 	add.w	sl, r4, #25
 800305e:	68e3      	ldr	r3, [r4, #12]
 8003060:	6832      	ldr	r2, [r6, #0]
 8003062:	1a9b      	subs	r3, r3, r2
 8003064:	42ab      	cmp	r3, r5
 8003066:	dc26      	bgt.n	80030b6 <_printf_common+0x96>
 8003068:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800306c:	1e13      	subs	r3, r2, #0
 800306e:	6822      	ldr	r2, [r4, #0]
 8003070:	bf18      	it	ne
 8003072:	2301      	movne	r3, #1
 8003074:	0692      	lsls	r2, r2, #26
 8003076:	d42b      	bmi.n	80030d0 <_printf_common+0xb0>
 8003078:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800307c:	4649      	mov	r1, r9
 800307e:	4638      	mov	r0, r7
 8003080:	47c0      	blx	r8
 8003082:	3001      	adds	r0, #1
 8003084:	d01e      	beq.n	80030c4 <_printf_common+0xa4>
 8003086:	6823      	ldr	r3, [r4, #0]
 8003088:	68e5      	ldr	r5, [r4, #12]
 800308a:	6832      	ldr	r2, [r6, #0]
 800308c:	f003 0306 	and.w	r3, r3, #6
 8003090:	2b04      	cmp	r3, #4
 8003092:	bf08      	it	eq
 8003094:	1aad      	subeq	r5, r5, r2
 8003096:	68a3      	ldr	r3, [r4, #8]
 8003098:	6922      	ldr	r2, [r4, #16]
 800309a:	bf0c      	ite	eq
 800309c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80030a0:	2500      	movne	r5, #0
 80030a2:	4293      	cmp	r3, r2
 80030a4:	bfc4      	itt	gt
 80030a6:	1a9b      	subgt	r3, r3, r2
 80030a8:	18ed      	addgt	r5, r5, r3
 80030aa:	2600      	movs	r6, #0
 80030ac:	341a      	adds	r4, #26
 80030ae:	42b5      	cmp	r5, r6
 80030b0:	d11a      	bne.n	80030e8 <_printf_common+0xc8>
 80030b2:	2000      	movs	r0, #0
 80030b4:	e008      	b.n	80030c8 <_printf_common+0xa8>
 80030b6:	2301      	movs	r3, #1
 80030b8:	4652      	mov	r2, sl
 80030ba:	4649      	mov	r1, r9
 80030bc:	4638      	mov	r0, r7
 80030be:	47c0      	blx	r8
 80030c0:	3001      	adds	r0, #1
 80030c2:	d103      	bne.n	80030cc <_printf_common+0xac>
 80030c4:	f04f 30ff 	mov.w	r0, #4294967295
 80030c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030cc:	3501      	adds	r5, #1
 80030ce:	e7c6      	b.n	800305e <_printf_common+0x3e>
 80030d0:	18e1      	adds	r1, r4, r3
 80030d2:	1c5a      	adds	r2, r3, #1
 80030d4:	2030      	movs	r0, #48	; 0x30
 80030d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80030da:	4422      	add	r2, r4
 80030dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80030e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80030e4:	3302      	adds	r3, #2
 80030e6:	e7c7      	b.n	8003078 <_printf_common+0x58>
 80030e8:	2301      	movs	r3, #1
 80030ea:	4622      	mov	r2, r4
 80030ec:	4649      	mov	r1, r9
 80030ee:	4638      	mov	r0, r7
 80030f0:	47c0      	blx	r8
 80030f2:	3001      	adds	r0, #1
 80030f4:	d0e6      	beq.n	80030c4 <_printf_common+0xa4>
 80030f6:	3601      	adds	r6, #1
 80030f8:	e7d9      	b.n	80030ae <_printf_common+0x8e>
	...

080030fc <_printf_i>:
 80030fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003100:	7e0f      	ldrb	r7, [r1, #24]
 8003102:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003104:	2f78      	cmp	r7, #120	; 0x78
 8003106:	4691      	mov	r9, r2
 8003108:	4680      	mov	r8, r0
 800310a:	460c      	mov	r4, r1
 800310c:	469a      	mov	sl, r3
 800310e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003112:	d807      	bhi.n	8003124 <_printf_i+0x28>
 8003114:	2f62      	cmp	r7, #98	; 0x62
 8003116:	d80a      	bhi.n	800312e <_printf_i+0x32>
 8003118:	2f00      	cmp	r7, #0
 800311a:	f000 80d8 	beq.w	80032ce <_printf_i+0x1d2>
 800311e:	2f58      	cmp	r7, #88	; 0x58
 8003120:	f000 80a3 	beq.w	800326a <_printf_i+0x16e>
 8003124:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003128:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800312c:	e03a      	b.n	80031a4 <_printf_i+0xa8>
 800312e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003132:	2b15      	cmp	r3, #21
 8003134:	d8f6      	bhi.n	8003124 <_printf_i+0x28>
 8003136:	a101      	add	r1, pc, #4	; (adr r1, 800313c <_printf_i+0x40>)
 8003138:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800313c:	08003195 	.word	0x08003195
 8003140:	080031a9 	.word	0x080031a9
 8003144:	08003125 	.word	0x08003125
 8003148:	08003125 	.word	0x08003125
 800314c:	08003125 	.word	0x08003125
 8003150:	08003125 	.word	0x08003125
 8003154:	080031a9 	.word	0x080031a9
 8003158:	08003125 	.word	0x08003125
 800315c:	08003125 	.word	0x08003125
 8003160:	08003125 	.word	0x08003125
 8003164:	08003125 	.word	0x08003125
 8003168:	080032b5 	.word	0x080032b5
 800316c:	080031d9 	.word	0x080031d9
 8003170:	08003297 	.word	0x08003297
 8003174:	08003125 	.word	0x08003125
 8003178:	08003125 	.word	0x08003125
 800317c:	080032d7 	.word	0x080032d7
 8003180:	08003125 	.word	0x08003125
 8003184:	080031d9 	.word	0x080031d9
 8003188:	08003125 	.word	0x08003125
 800318c:	08003125 	.word	0x08003125
 8003190:	0800329f 	.word	0x0800329f
 8003194:	682b      	ldr	r3, [r5, #0]
 8003196:	1d1a      	adds	r2, r3, #4
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	602a      	str	r2, [r5, #0]
 800319c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80031a4:	2301      	movs	r3, #1
 80031a6:	e0a3      	b.n	80032f0 <_printf_i+0x1f4>
 80031a8:	6820      	ldr	r0, [r4, #0]
 80031aa:	6829      	ldr	r1, [r5, #0]
 80031ac:	0606      	lsls	r6, r0, #24
 80031ae:	f101 0304 	add.w	r3, r1, #4
 80031b2:	d50a      	bpl.n	80031ca <_printf_i+0xce>
 80031b4:	680e      	ldr	r6, [r1, #0]
 80031b6:	602b      	str	r3, [r5, #0]
 80031b8:	2e00      	cmp	r6, #0
 80031ba:	da03      	bge.n	80031c4 <_printf_i+0xc8>
 80031bc:	232d      	movs	r3, #45	; 0x2d
 80031be:	4276      	negs	r6, r6
 80031c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031c4:	485e      	ldr	r0, [pc, #376]	; (8003340 <_printf_i+0x244>)
 80031c6:	230a      	movs	r3, #10
 80031c8:	e019      	b.n	80031fe <_printf_i+0x102>
 80031ca:	680e      	ldr	r6, [r1, #0]
 80031cc:	602b      	str	r3, [r5, #0]
 80031ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 80031d2:	bf18      	it	ne
 80031d4:	b236      	sxthne	r6, r6
 80031d6:	e7ef      	b.n	80031b8 <_printf_i+0xbc>
 80031d8:	682b      	ldr	r3, [r5, #0]
 80031da:	6820      	ldr	r0, [r4, #0]
 80031dc:	1d19      	adds	r1, r3, #4
 80031de:	6029      	str	r1, [r5, #0]
 80031e0:	0601      	lsls	r1, r0, #24
 80031e2:	d501      	bpl.n	80031e8 <_printf_i+0xec>
 80031e4:	681e      	ldr	r6, [r3, #0]
 80031e6:	e002      	b.n	80031ee <_printf_i+0xf2>
 80031e8:	0646      	lsls	r6, r0, #25
 80031ea:	d5fb      	bpl.n	80031e4 <_printf_i+0xe8>
 80031ec:	881e      	ldrh	r6, [r3, #0]
 80031ee:	4854      	ldr	r0, [pc, #336]	; (8003340 <_printf_i+0x244>)
 80031f0:	2f6f      	cmp	r7, #111	; 0x6f
 80031f2:	bf0c      	ite	eq
 80031f4:	2308      	moveq	r3, #8
 80031f6:	230a      	movne	r3, #10
 80031f8:	2100      	movs	r1, #0
 80031fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80031fe:	6865      	ldr	r5, [r4, #4]
 8003200:	60a5      	str	r5, [r4, #8]
 8003202:	2d00      	cmp	r5, #0
 8003204:	bfa2      	ittt	ge
 8003206:	6821      	ldrge	r1, [r4, #0]
 8003208:	f021 0104 	bicge.w	r1, r1, #4
 800320c:	6021      	strge	r1, [r4, #0]
 800320e:	b90e      	cbnz	r6, 8003214 <_printf_i+0x118>
 8003210:	2d00      	cmp	r5, #0
 8003212:	d04d      	beq.n	80032b0 <_printf_i+0x1b4>
 8003214:	4615      	mov	r5, r2
 8003216:	fbb6 f1f3 	udiv	r1, r6, r3
 800321a:	fb03 6711 	mls	r7, r3, r1, r6
 800321e:	5dc7      	ldrb	r7, [r0, r7]
 8003220:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003224:	4637      	mov	r7, r6
 8003226:	42bb      	cmp	r3, r7
 8003228:	460e      	mov	r6, r1
 800322a:	d9f4      	bls.n	8003216 <_printf_i+0x11a>
 800322c:	2b08      	cmp	r3, #8
 800322e:	d10b      	bne.n	8003248 <_printf_i+0x14c>
 8003230:	6823      	ldr	r3, [r4, #0]
 8003232:	07de      	lsls	r6, r3, #31
 8003234:	d508      	bpl.n	8003248 <_printf_i+0x14c>
 8003236:	6923      	ldr	r3, [r4, #16]
 8003238:	6861      	ldr	r1, [r4, #4]
 800323a:	4299      	cmp	r1, r3
 800323c:	bfde      	ittt	le
 800323e:	2330      	movle	r3, #48	; 0x30
 8003240:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003244:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003248:	1b52      	subs	r2, r2, r5
 800324a:	6122      	str	r2, [r4, #16]
 800324c:	f8cd a000 	str.w	sl, [sp]
 8003250:	464b      	mov	r3, r9
 8003252:	aa03      	add	r2, sp, #12
 8003254:	4621      	mov	r1, r4
 8003256:	4640      	mov	r0, r8
 8003258:	f7ff fee2 	bl	8003020 <_printf_common>
 800325c:	3001      	adds	r0, #1
 800325e:	d14c      	bne.n	80032fa <_printf_i+0x1fe>
 8003260:	f04f 30ff 	mov.w	r0, #4294967295
 8003264:	b004      	add	sp, #16
 8003266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800326a:	4835      	ldr	r0, [pc, #212]	; (8003340 <_printf_i+0x244>)
 800326c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003270:	6829      	ldr	r1, [r5, #0]
 8003272:	6823      	ldr	r3, [r4, #0]
 8003274:	f851 6b04 	ldr.w	r6, [r1], #4
 8003278:	6029      	str	r1, [r5, #0]
 800327a:	061d      	lsls	r5, r3, #24
 800327c:	d514      	bpl.n	80032a8 <_printf_i+0x1ac>
 800327e:	07df      	lsls	r7, r3, #31
 8003280:	bf44      	itt	mi
 8003282:	f043 0320 	orrmi.w	r3, r3, #32
 8003286:	6023      	strmi	r3, [r4, #0]
 8003288:	b91e      	cbnz	r6, 8003292 <_printf_i+0x196>
 800328a:	6823      	ldr	r3, [r4, #0]
 800328c:	f023 0320 	bic.w	r3, r3, #32
 8003290:	6023      	str	r3, [r4, #0]
 8003292:	2310      	movs	r3, #16
 8003294:	e7b0      	b.n	80031f8 <_printf_i+0xfc>
 8003296:	6823      	ldr	r3, [r4, #0]
 8003298:	f043 0320 	orr.w	r3, r3, #32
 800329c:	6023      	str	r3, [r4, #0]
 800329e:	2378      	movs	r3, #120	; 0x78
 80032a0:	4828      	ldr	r0, [pc, #160]	; (8003344 <_printf_i+0x248>)
 80032a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80032a6:	e7e3      	b.n	8003270 <_printf_i+0x174>
 80032a8:	0659      	lsls	r1, r3, #25
 80032aa:	bf48      	it	mi
 80032ac:	b2b6      	uxthmi	r6, r6
 80032ae:	e7e6      	b.n	800327e <_printf_i+0x182>
 80032b0:	4615      	mov	r5, r2
 80032b2:	e7bb      	b.n	800322c <_printf_i+0x130>
 80032b4:	682b      	ldr	r3, [r5, #0]
 80032b6:	6826      	ldr	r6, [r4, #0]
 80032b8:	6961      	ldr	r1, [r4, #20]
 80032ba:	1d18      	adds	r0, r3, #4
 80032bc:	6028      	str	r0, [r5, #0]
 80032be:	0635      	lsls	r5, r6, #24
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	d501      	bpl.n	80032c8 <_printf_i+0x1cc>
 80032c4:	6019      	str	r1, [r3, #0]
 80032c6:	e002      	b.n	80032ce <_printf_i+0x1d2>
 80032c8:	0670      	lsls	r0, r6, #25
 80032ca:	d5fb      	bpl.n	80032c4 <_printf_i+0x1c8>
 80032cc:	8019      	strh	r1, [r3, #0]
 80032ce:	2300      	movs	r3, #0
 80032d0:	6123      	str	r3, [r4, #16]
 80032d2:	4615      	mov	r5, r2
 80032d4:	e7ba      	b.n	800324c <_printf_i+0x150>
 80032d6:	682b      	ldr	r3, [r5, #0]
 80032d8:	1d1a      	adds	r2, r3, #4
 80032da:	602a      	str	r2, [r5, #0]
 80032dc:	681d      	ldr	r5, [r3, #0]
 80032de:	6862      	ldr	r2, [r4, #4]
 80032e0:	2100      	movs	r1, #0
 80032e2:	4628      	mov	r0, r5
 80032e4:	f7fc ff74 	bl	80001d0 <memchr>
 80032e8:	b108      	cbz	r0, 80032ee <_printf_i+0x1f2>
 80032ea:	1b40      	subs	r0, r0, r5
 80032ec:	6060      	str	r0, [r4, #4]
 80032ee:	6863      	ldr	r3, [r4, #4]
 80032f0:	6123      	str	r3, [r4, #16]
 80032f2:	2300      	movs	r3, #0
 80032f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032f8:	e7a8      	b.n	800324c <_printf_i+0x150>
 80032fa:	6923      	ldr	r3, [r4, #16]
 80032fc:	462a      	mov	r2, r5
 80032fe:	4649      	mov	r1, r9
 8003300:	4640      	mov	r0, r8
 8003302:	47d0      	blx	sl
 8003304:	3001      	adds	r0, #1
 8003306:	d0ab      	beq.n	8003260 <_printf_i+0x164>
 8003308:	6823      	ldr	r3, [r4, #0]
 800330a:	079b      	lsls	r3, r3, #30
 800330c:	d413      	bmi.n	8003336 <_printf_i+0x23a>
 800330e:	68e0      	ldr	r0, [r4, #12]
 8003310:	9b03      	ldr	r3, [sp, #12]
 8003312:	4298      	cmp	r0, r3
 8003314:	bfb8      	it	lt
 8003316:	4618      	movlt	r0, r3
 8003318:	e7a4      	b.n	8003264 <_printf_i+0x168>
 800331a:	2301      	movs	r3, #1
 800331c:	4632      	mov	r2, r6
 800331e:	4649      	mov	r1, r9
 8003320:	4640      	mov	r0, r8
 8003322:	47d0      	blx	sl
 8003324:	3001      	adds	r0, #1
 8003326:	d09b      	beq.n	8003260 <_printf_i+0x164>
 8003328:	3501      	adds	r5, #1
 800332a:	68e3      	ldr	r3, [r4, #12]
 800332c:	9903      	ldr	r1, [sp, #12]
 800332e:	1a5b      	subs	r3, r3, r1
 8003330:	42ab      	cmp	r3, r5
 8003332:	dcf2      	bgt.n	800331a <_printf_i+0x21e>
 8003334:	e7eb      	b.n	800330e <_printf_i+0x212>
 8003336:	2500      	movs	r5, #0
 8003338:	f104 0619 	add.w	r6, r4, #25
 800333c:	e7f5      	b.n	800332a <_printf_i+0x22e>
 800333e:	bf00      	nop
 8003340:	08003be3 	.word	0x08003be3
 8003344:	08003bf4 	.word	0x08003bf4

08003348 <__swbuf_r>:
 8003348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800334a:	460e      	mov	r6, r1
 800334c:	4614      	mov	r4, r2
 800334e:	4605      	mov	r5, r0
 8003350:	b118      	cbz	r0, 800335a <__swbuf_r+0x12>
 8003352:	6983      	ldr	r3, [r0, #24]
 8003354:	b90b      	cbnz	r3, 800335a <__swbuf_r+0x12>
 8003356:	f000 f9d9 	bl	800370c <__sinit>
 800335a:	4b21      	ldr	r3, [pc, #132]	; (80033e0 <__swbuf_r+0x98>)
 800335c:	429c      	cmp	r4, r3
 800335e:	d12b      	bne.n	80033b8 <__swbuf_r+0x70>
 8003360:	686c      	ldr	r4, [r5, #4]
 8003362:	69a3      	ldr	r3, [r4, #24]
 8003364:	60a3      	str	r3, [r4, #8]
 8003366:	89a3      	ldrh	r3, [r4, #12]
 8003368:	071a      	lsls	r2, r3, #28
 800336a:	d52f      	bpl.n	80033cc <__swbuf_r+0x84>
 800336c:	6923      	ldr	r3, [r4, #16]
 800336e:	b36b      	cbz	r3, 80033cc <__swbuf_r+0x84>
 8003370:	6923      	ldr	r3, [r4, #16]
 8003372:	6820      	ldr	r0, [r4, #0]
 8003374:	1ac0      	subs	r0, r0, r3
 8003376:	6963      	ldr	r3, [r4, #20]
 8003378:	b2f6      	uxtb	r6, r6
 800337a:	4283      	cmp	r3, r0
 800337c:	4637      	mov	r7, r6
 800337e:	dc04      	bgt.n	800338a <__swbuf_r+0x42>
 8003380:	4621      	mov	r1, r4
 8003382:	4628      	mov	r0, r5
 8003384:	f000 f92e 	bl	80035e4 <_fflush_r>
 8003388:	bb30      	cbnz	r0, 80033d8 <__swbuf_r+0x90>
 800338a:	68a3      	ldr	r3, [r4, #8]
 800338c:	3b01      	subs	r3, #1
 800338e:	60a3      	str	r3, [r4, #8]
 8003390:	6823      	ldr	r3, [r4, #0]
 8003392:	1c5a      	adds	r2, r3, #1
 8003394:	6022      	str	r2, [r4, #0]
 8003396:	701e      	strb	r6, [r3, #0]
 8003398:	6963      	ldr	r3, [r4, #20]
 800339a:	3001      	adds	r0, #1
 800339c:	4283      	cmp	r3, r0
 800339e:	d004      	beq.n	80033aa <__swbuf_r+0x62>
 80033a0:	89a3      	ldrh	r3, [r4, #12]
 80033a2:	07db      	lsls	r3, r3, #31
 80033a4:	d506      	bpl.n	80033b4 <__swbuf_r+0x6c>
 80033a6:	2e0a      	cmp	r6, #10
 80033a8:	d104      	bne.n	80033b4 <__swbuf_r+0x6c>
 80033aa:	4621      	mov	r1, r4
 80033ac:	4628      	mov	r0, r5
 80033ae:	f000 f919 	bl	80035e4 <_fflush_r>
 80033b2:	b988      	cbnz	r0, 80033d8 <__swbuf_r+0x90>
 80033b4:	4638      	mov	r0, r7
 80033b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033b8:	4b0a      	ldr	r3, [pc, #40]	; (80033e4 <__swbuf_r+0x9c>)
 80033ba:	429c      	cmp	r4, r3
 80033bc:	d101      	bne.n	80033c2 <__swbuf_r+0x7a>
 80033be:	68ac      	ldr	r4, [r5, #8]
 80033c0:	e7cf      	b.n	8003362 <__swbuf_r+0x1a>
 80033c2:	4b09      	ldr	r3, [pc, #36]	; (80033e8 <__swbuf_r+0xa0>)
 80033c4:	429c      	cmp	r4, r3
 80033c6:	bf08      	it	eq
 80033c8:	68ec      	ldreq	r4, [r5, #12]
 80033ca:	e7ca      	b.n	8003362 <__swbuf_r+0x1a>
 80033cc:	4621      	mov	r1, r4
 80033ce:	4628      	mov	r0, r5
 80033d0:	f000 f80c 	bl	80033ec <__swsetup_r>
 80033d4:	2800      	cmp	r0, #0
 80033d6:	d0cb      	beq.n	8003370 <__swbuf_r+0x28>
 80033d8:	f04f 37ff 	mov.w	r7, #4294967295
 80033dc:	e7ea      	b.n	80033b4 <__swbuf_r+0x6c>
 80033de:	bf00      	nop
 80033e0:	08003c28 	.word	0x08003c28
 80033e4:	08003c48 	.word	0x08003c48
 80033e8:	08003c08 	.word	0x08003c08

080033ec <__swsetup_r>:
 80033ec:	4b32      	ldr	r3, [pc, #200]	; (80034b8 <__swsetup_r+0xcc>)
 80033ee:	b570      	push	{r4, r5, r6, lr}
 80033f0:	681d      	ldr	r5, [r3, #0]
 80033f2:	4606      	mov	r6, r0
 80033f4:	460c      	mov	r4, r1
 80033f6:	b125      	cbz	r5, 8003402 <__swsetup_r+0x16>
 80033f8:	69ab      	ldr	r3, [r5, #24]
 80033fa:	b913      	cbnz	r3, 8003402 <__swsetup_r+0x16>
 80033fc:	4628      	mov	r0, r5
 80033fe:	f000 f985 	bl	800370c <__sinit>
 8003402:	4b2e      	ldr	r3, [pc, #184]	; (80034bc <__swsetup_r+0xd0>)
 8003404:	429c      	cmp	r4, r3
 8003406:	d10f      	bne.n	8003428 <__swsetup_r+0x3c>
 8003408:	686c      	ldr	r4, [r5, #4]
 800340a:	89a3      	ldrh	r3, [r4, #12]
 800340c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003410:	0719      	lsls	r1, r3, #28
 8003412:	d42c      	bmi.n	800346e <__swsetup_r+0x82>
 8003414:	06dd      	lsls	r5, r3, #27
 8003416:	d411      	bmi.n	800343c <__swsetup_r+0x50>
 8003418:	2309      	movs	r3, #9
 800341a:	6033      	str	r3, [r6, #0]
 800341c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003420:	81a3      	strh	r3, [r4, #12]
 8003422:	f04f 30ff 	mov.w	r0, #4294967295
 8003426:	e03e      	b.n	80034a6 <__swsetup_r+0xba>
 8003428:	4b25      	ldr	r3, [pc, #148]	; (80034c0 <__swsetup_r+0xd4>)
 800342a:	429c      	cmp	r4, r3
 800342c:	d101      	bne.n	8003432 <__swsetup_r+0x46>
 800342e:	68ac      	ldr	r4, [r5, #8]
 8003430:	e7eb      	b.n	800340a <__swsetup_r+0x1e>
 8003432:	4b24      	ldr	r3, [pc, #144]	; (80034c4 <__swsetup_r+0xd8>)
 8003434:	429c      	cmp	r4, r3
 8003436:	bf08      	it	eq
 8003438:	68ec      	ldreq	r4, [r5, #12]
 800343a:	e7e6      	b.n	800340a <__swsetup_r+0x1e>
 800343c:	0758      	lsls	r0, r3, #29
 800343e:	d512      	bpl.n	8003466 <__swsetup_r+0x7a>
 8003440:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003442:	b141      	cbz	r1, 8003456 <__swsetup_r+0x6a>
 8003444:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003448:	4299      	cmp	r1, r3
 800344a:	d002      	beq.n	8003452 <__swsetup_r+0x66>
 800344c:	4630      	mov	r0, r6
 800344e:	f7ff fac9 	bl	80029e4 <_free_r>
 8003452:	2300      	movs	r3, #0
 8003454:	6363      	str	r3, [r4, #52]	; 0x34
 8003456:	89a3      	ldrh	r3, [r4, #12]
 8003458:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800345c:	81a3      	strh	r3, [r4, #12]
 800345e:	2300      	movs	r3, #0
 8003460:	6063      	str	r3, [r4, #4]
 8003462:	6923      	ldr	r3, [r4, #16]
 8003464:	6023      	str	r3, [r4, #0]
 8003466:	89a3      	ldrh	r3, [r4, #12]
 8003468:	f043 0308 	orr.w	r3, r3, #8
 800346c:	81a3      	strh	r3, [r4, #12]
 800346e:	6923      	ldr	r3, [r4, #16]
 8003470:	b94b      	cbnz	r3, 8003486 <__swsetup_r+0x9a>
 8003472:	89a3      	ldrh	r3, [r4, #12]
 8003474:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800347c:	d003      	beq.n	8003486 <__swsetup_r+0x9a>
 800347e:	4621      	mov	r1, r4
 8003480:	4630      	mov	r0, r6
 8003482:	f000 fa09 	bl	8003898 <__smakebuf_r>
 8003486:	89a0      	ldrh	r0, [r4, #12]
 8003488:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800348c:	f010 0301 	ands.w	r3, r0, #1
 8003490:	d00a      	beq.n	80034a8 <__swsetup_r+0xbc>
 8003492:	2300      	movs	r3, #0
 8003494:	60a3      	str	r3, [r4, #8]
 8003496:	6963      	ldr	r3, [r4, #20]
 8003498:	425b      	negs	r3, r3
 800349a:	61a3      	str	r3, [r4, #24]
 800349c:	6923      	ldr	r3, [r4, #16]
 800349e:	b943      	cbnz	r3, 80034b2 <__swsetup_r+0xc6>
 80034a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80034a4:	d1ba      	bne.n	800341c <__swsetup_r+0x30>
 80034a6:	bd70      	pop	{r4, r5, r6, pc}
 80034a8:	0781      	lsls	r1, r0, #30
 80034aa:	bf58      	it	pl
 80034ac:	6963      	ldrpl	r3, [r4, #20]
 80034ae:	60a3      	str	r3, [r4, #8]
 80034b0:	e7f4      	b.n	800349c <__swsetup_r+0xb0>
 80034b2:	2000      	movs	r0, #0
 80034b4:	e7f7      	b.n	80034a6 <__swsetup_r+0xba>
 80034b6:	bf00      	nop
 80034b8:	20000004 	.word	0x20000004
 80034bc:	08003c28 	.word	0x08003c28
 80034c0:	08003c48 	.word	0x08003c48
 80034c4:	08003c08 	.word	0x08003c08

080034c8 <abort>:
 80034c8:	b508      	push	{r3, lr}
 80034ca:	2006      	movs	r0, #6
 80034cc:	f000 fa4c 	bl	8003968 <raise>
 80034d0:	2001      	movs	r0, #1
 80034d2:	f7fd fc11 	bl	8000cf8 <_exit>
	...

080034d8 <__sflush_r>:
 80034d8:	898a      	ldrh	r2, [r1, #12]
 80034da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034de:	4605      	mov	r5, r0
 80034e0:	0710      	lsls	r0, r2, #28
 80034e2:	460c      	mov	r4, r1
 80034e4:	d458      	bmi.n	8003598 <__sflush_r+0xc0>
 80034e6:	684b      	ldr	r3, [r1, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	dc05      	bgt.n	80034f8 <__sflush_r+0x20>
 80034ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	dc02      	bgt.n	80034f8 <__sflush_r+0x20>
 80034f2:	2000      	movs	r0, #0
 80034f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034fa:	2e00      	cmp	r6, #0
 80034fc:	d0f9      	beq.n	80034f2 <__sflush_r+0x1a>
 80034fe:	2300      	movs	r3, #0
 8003500:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003504:	682f      	ldr	r7, [r5, #0]
 8003506:	602b      	str	r3, [r5, #0]
 8003508:	d032      	beq.n	8003570 <__sflush_r+0x98>
 800350a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800350c:	89a3      	ldrh	r3, [r4, #12]
 800350e:	075a      	lsls	r2, r3, #29
 8003510:	d505      	bpl.n	800351e <__sflush_r+0x46>
 8003512:	6863      	ldr	r3, [r4, #4]
 8003514:	1ac0      	subs	r0, r0, r3
 8003516:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003518:	b10b      	cbz	r3, 800351e <__sflush_r+0x46>
 800351a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800351c:	1ac0      	subs	r0, r0, r3
 800351e:	2300      	movs	r3, #0
 8003520:	4602      	mov	r2, r0
 8003522:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003524:	6a21      	ldr	r1, [r4, #32]
 8003526:	4628      	mov	r0, r5
 8003528:	47b0      	blx	r6
 800352a:	1c43      	adds	r3, r0, #1
 800352c:	89a3      	ldrh	r3, [r4, #12]
 800352e:	d106      	bne.n	800353e <__sflush_r+0x66>
 8003530:	6829      	ldr	r1, [r5, #0]
 8003532:	291d      	cmp	r1, #29
 8003534:	d82c      	bhi.n	8003590 <__sflush_r+0xb8>
 8003536:	4a2a      	ldr	r2, [pc, #168]	; (80035e0 <__sflush_r+0x108>)
 8003538:	40ca      	lsrs	r2, r1
 800353a:	07d6      	lsls	r6, r2, #31
 800353c:	d528      	bpl.n	8003590 <__sflush_r+0xb8>
 800353e:	2200      	movs	r2, #0
 8003540:	6062      	str	r2, [r4, #4]
 8003542:	04d9      	lsls	r1, r3, #19
 8003544:	6922      	ldr	r2, [r4, #16]
 8003546:	6022      	str	r2, [r4, #0]
 8003548:	d504      	bpl.n	8003554 <__sflush_r+0x7c>
 800354a:	1c42      	adds	r2, r0, #1
 800354c:	d101      	bne.n	8003552 <__sflush_r+0x7a>
 800354e:	682b      	ldr	r3, [r5, #0]
 8003550:	b903      	cbnz	r3, 8003554 <__sflush_r+0x7c>
 8003552:	6560      	str	r0, [r4, #84]	; 0x54
 8003554:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003556:	602f      	str	r7, [r5, #0]
 8003558:	2900      	cmp	r1, #0
 800355a:	d0ca      	beq.n	80034f2 <__sflush_r+0x1a>
 800355c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003560:	4299      	cmp	r1, r3
 8003562:	d002      	beq.n	800356a <__sflush_r+0x92>
 8003564:	4628      	mov	r0, r5
 8003566:	f7ff fa3d 	bl	80029e4 <_free_r>
 800356a:	2000      	movs	r0, #0
 800356c:	6360      	str	r0, [r4, #52]	; 0x34
 800356e:	e7c1      	b.n	80034f4 <__sflush_r+0x1c>
 8003570:	6a21      	ldr	r1, [r4, #32]
 8003572:	2301      	movs	r3, #1
 8003574:	4628      	mov	r0, r5
 8003576:	47b0      	blx	r6
 8003578:	1c41      	adds	r1, r0, #1
 800357a:	d1c7      	bne.n	800350c <__sflush_r+0x34>
 800357c:	682b      	ldr	r3, [r5, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d0c4      	beq.n	800350c <__sflush_r+0x34>
 8003582:	2b1d      	cmp	r3, #29
 8003584:	d001      	beq.n	800358a <__sflush_r+0xb2>
 8003586:	2b16      	cmp	r3, #22
 8003588:	d101      	bne.n	800358e <__sflush_r+0xb6>
 800358a:	602f      	str	r7, [r5, #0]
 800358c:	e7b1      	b.n	80034f2 <__sflush_r+0x1a>
 800358e:	89a3      	ldrh	r3, [r4, #12]
 8003590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003594:	81a3      	strh	r3, [r4, #12]
 8003596:	e7ad      	b.n	80034f4 <__sflush_r+0x1c>
 8003598:	690f      	ldr	r7, [r1, #16]
 800359a:	2f00      	cmp	r7, #0
 800359c:	d0a9      	beq.n	80034f2 <__sflush_r+0x1a>
 800359e:	0793      	lsls	r3, r2, #30
 80035a0:	680e      	ldr	r6, [r1, #0]
 80035a2:	bf08      	it	eq
 80035a4:	694b      	ldreq	r3, [r1, #20]
 80035a6:	600f      	str	r7, [r1, #0]
 80035a8:	bf18      	it	ne
 80035aa:	2300      	movne	r3, #0
 80035ac:	eba6 0807 	sub.w	r8, r6, r7
 80035b0:	608b      	str	r3, [r1, #8]
 80035b2:	f1b8 0f00 	cmp.w	r8, #0
 80035b6:	dd9c      	ble.n	80034f2 <__sflush_r+0x1a>
 80035b8:	6a21      	ldr	r1, [r4, #32]
 80035ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80035bc:	4643      	mov	r3, r8
 80035be:	463a      	mov	r2, r7
 80035c0:	4628      	mov	r0, r5
 80035c2:	47b0      	blx	r6
 80035c4:	2800      	cmp	r0, #0
 80035c6:	dc06      	bgt.n	80035d6 <__sflush_r+0xfe>
 80035c8:	89a3      	ldrh	r3, [r4, #12]
 80035ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035ce:	81a3      	strh	r3, [r4, #12]
 80035d0:	f04f 30ff 	mov.w	r0, #4294967295
 80035d4:	e78e      	b.n	80034f4 <__sflush_r+0x1c>
 80035d6:	4407      	add	r7, r0
 80035d8:	eba8 0800 	sub.w	r8, r8, r0
 80035dc:	e7e9      	b.n	80035b2 <__sflush_r+0xda>
 80035de:	bf00      	nop
 80035e0:	20400001 	.word	0x20400001

080035e4 <_fflush_r>:
 80035e4:	b538      	push	{r3, r4, r5, lr}
 80035e6:	690b      	ldr	r3, [r1, #16]
 80035e8:	4605      	mov	r5, r0
 80035ea:	460c      	mov	r4, r1
 80035ec:	b913      	cbnz	r3, 80035f4 <_fflush_r+0x10>
 80035ee:	2500      	movs	r5, #0
 80035f0:	4628      	mov	r0, r5
 80035f2:	bd38      	pop	{r3, r4, r5, pc}
 80035f4:	b118      	cbz	r0, 80035fe <_fflush_r+0x1a>
 80035f6:	6983      	ldr	r3, [r0, #24]
 80035f8:	b90b      	cbnz	r3, 80035fe <_fflush_r+0x1a>
 80035fa:	f000 f887 	bl	800370c <__sinit>
 80035fe:	4b14      	ldr	r3, [pc, #80]	; (8003650 <_fflush_r+0x6c>)
 8003600:	429c      	cmp	r4, r3
 8003602:	d11b      	bne.n	800363c <_fflush_r+0x58>
 8003604:	686c      	ldr	r4, [r5, #4]
 8003606:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0ef      	beq.n	80035ee <_fflush_r+0xa>
 800360e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003610:	07d0      	lsls	r0, r2, #31
 8003612:	d404      	bmi.n	800361e <_fflush_r+0x3a>
 8003614:	0599      	lsls	r1, r3, #22
 8003616:	d402      	bmi.n	800361e <_fflush_r+0x3a>
 8003618:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800361a:	f000 f915 	bl	8003848 <__retarget_lock_acquire_recursive>
 800361e:	4628      	mov	r0, r5
 8003620:	4621      	mov	r1, r4
 8003622:	f7ff ff59 	bl	80034d8 <__sflush_r>
 8003626:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003628:	07da      	lsls	r2, r3, #31
 800362a:	4605      	mov	r5, r0
 800362c:	d4e0      	bmi.n	80035f0 <_fflush_r+0xc>
 800362e:	89a3      	ldrh	r3, [r4, #12]
 8003630:	059b      	lsls	r3, r3, #22
 8003632:	d4dd      	bmi.n	80035f0 <_fflush_r+0xc>
 8003634:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003636:	f000 f908 	bl	800384a <__retarget_lock_release_recursive>
 800363a:	e7d9      	b.n	80035f0 <_fflush_r+0xc>
 800363c:	4b05      	ldr	r3, [pc, #20]	; (8003654 <_fflush_r+0x70>)
 800363e:	429c      	cmp	r4, r3
 8003640:	d101      	bne.n	8003646 <_fflush_r+0x62>
 8003642:	68ac      	ldr	r4, [r5, #8]
 8003644:	e7df      	b.n	8003606 <_fflush_r+0x22>
 8003646:	4b04      	ldr	r3, [pc, #16]	; (8003658 <_fflush_r+0x74>)
 8003648:	429c      	cmp	r4, r3
 800364a:	bf08      	it	eq
 800364c:	68ec      	ldreq	r4, [r5, #12]
 800364e:	e7da      	b.n	8003606 <_fflush_r+0x22>
 8003650:	08003c28 	.word	0x08003c28
 8003654:	08003c48 	.word	0x08003c48
 8003658:	08003c08 	.word	0x08003c08

0800365c <std>:
 800365c:	2300      	movs	r3, #0
 800365e:	b510      	push	{r4, lr}
 8003660:	4604      	mov	r4, r0
 8003662:	e9c0 3300 	strd	r3, r3, [r0]
 8003666:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800366a:	6083      	str	r3, [r0, #8]
 800366c:	8181      	strh	r1, [r0, #12]
 800366e:	6643      	str	r3, [r0, #100]	; 0x64
 8003670:	81c2      	strh	r2, [r0, #14]
 8003672:	6183      	str	r3, [r0, #24]
 8003674:	4619      	mov	r1, r3
 8003676:	2208      	movs	r2, #8
 8003678:	305c      	adds	r0, #92	; 0x5c
 800367a:	f7ff f9ab 	bl	80029d4 <memset>
 800367e:	4b05      	ldr	r3, [pc, #20]	; (8003694 <std+0x38>)
 8003680:	6263      	str	r3, [r4, #36]	; 0x24
 8003682:	4b05      	ldr	r3, [pc, #20]	; (8003698 <std+0x3c>)
 8003684:	62a3      	str	r3, [r4, #40]	; 0x28
 8003686:	4b05      	ldr	r3, [pc, #20]	; (800369c <std+0x40>)
 8003688:	62e3      	str	r3, [r4, #44]	; 0x2c
 800368a:	4b05      	ldr	r3, [pc, #20]	; (80036a0 <std+0x44>)
 800368c:	6224      	str	r4, [r4, #32]
 800368e:	6323      	str	r3, [r4, #48]	; 0x30
 8003690:	bd10      	pop	{r4, pc}
 8003692:	bf00      	nop
 8003694:	080039a1 	.word	0x080039a1
 8003698:	080039c3 	.word	0x080039c3
 800369c:	080039fb 	.word	0x080039fb
 80036a0:	08003a1f 	.word	0x08003a1f

080036a4 <_cleanup_r>:
 80036a4:	4901      	ldr	r1, [pc, #4]	; (80036ac <_cleanup_r+0x8>)
 80036a6:	f000 b8af 	b.w	8003808 <_fwalk_reent>
 80036aa:	bf00      	nop
 80036ac:	080035e5 	.word	0x080035e5

080036b0 <__sfmoreglue>:
 80036b0:	b570      	push	{r4, r5, r6, lr}
 80036b2:	2268      	movs	r2, #104	; 0x68
 80036b4:	1e4d      	subs	r5, r1, #1
 80036b6:	4355      	muls	r5, r2
 80036b8:	460e      	mov	r6, r1
 80036ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80036be:	f7ff f9fd 	bl	8002abc <_malloc_r>
 80036c2:	4604      	mov	r4, r0
 80036c4:	b140      	cbz	r0, 80036d8 <__sfmoreglue+0x28>
 80036c6:	2100      	movs	r1, #0
 80036c8:	e9c0 1600 	strd	r1, r6, [r0]
 80036cc:	300c      	adds	r0, #12
 80036ce:	60a0      	str	r0, [r4, #8]
 80036d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80036d4:	f7ff f97e 	bl	80029d4 <memset>
 80036d8:	4620      	mov	r0, r4
 80036da:	bd70      	pop	{r4, r5, r6, pc}

080036dc <__sfp_lock_acquire>:
 80036dc:	4801      	ldr	r0, [pc, #4]	; (80036e4 <__sfp_lock_acquire+0x8>)
 80036de:	f000 b8b3 	b.w	8003848 <__retarget_lock_acquire_recursive>
 80036e2:	bf00      	nop
 80036e4:	2000039d 	.word	0x2000039d

080036e8 <__sfp_lock_release>:
 80036e8:	4801      	ldr	r0, [pc, #4]	; (80036f0 <__sfp_lock_release+0x8>)
 80036ea:	f000 b8ae 	b.w	800384a <__retarget_lock_release_recursive>
 80036ee:	bf00      	nop
 80036f0:	2000039d 	.word	0x2000039d

080036f4 <__sinit_lock_acquire>:
 80036f4:	4801      	ldr	r0, [pc, #4]	; (80036fc <__sinit_lock_acquire+0x8>)
 80036f6:	f000 b8a7 	b.w	8003848 <__retarget_lock_acquire_recursive>
 80036fa:	bf00      	nop
 80036fc:	2000039e 	.word	0x2000039e

08003700 <__sinit_lock_release>:
 8003700:	4801      	ldr	r0, [pc, #4]	; (8003708 <__sinit_lock_release+0x8>)
 8003702:	f000 b8a2 	b.w	800384a <__retarget_lock_release_recursive>
 8003706:	bf00      	nop
 8003708:	2000039e 	.word	0x2000039e

0800370c <__sinit>:
 800370c:	b510      	push	{r4, lr}
 800370e:	4604      	mov	r4, r0
 8003710:	f7ff fff0 	bl	80036f4 <__sinit_lock_acquire>
 8003714:	69a3      	ldr	r3, [r4, #24]
 8003716:	b11b      	cbz	r3, 8003720 <__sinit+0x14>
 8003718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800371c:	f7ff bff0 	b.w	8003700 <__sinit_lock_release>
 8003720:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003724:	6523      	str	r3, [r4, #80]	; 0x50
 8003726:	4b13      	ldr	r3, [pc, #76]	; (8003774 <__sinit+0x68>)
 8003728:	4a13      	ldr	r2, [pc, #76]	; (8003778 <__sinit+0x6c>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	62a2      	str	r2, [r4, #40]	; 0x28
 800372e:	42a3      	cmp	r3, r4
 8003730:	bf04      	itt	eq
 8003732:	2301      	moveq	r3, #1
 8003734:	61a3      	streq	r3, [r4, #24]
 8003736:	4620      	mov	r0, r4
 8003738:	f000 f820 	bl	800377c <__sfp>
 800373c:	6060      	str	r0, [r4, #4]
 800373e:	4620      	mov	r0, r4
 8003740:	f000 f81c 	bl	800377c <__sfp>
 8003744:	60a0      	str	r0, [r4, #8]
 8003746:	4620      	mov	r0, r4
 8003748:	f000 f818 	bl	800377c <__sfp>
 800374c:	2200      	movs	r2, #0
 800374e:	60e0      	str	r0, [r4, #12]
 8003750:	2104      	movs	r1, #4
 8003752:	6860      	ldr	r0, [r4, #4]
 8003754:	f7ff ff82 	bl	800365c <std>
 8003758:	68a0      	ldr	r0, [r4, #8]
 800375a:	2201      	movs	r2, #1
 800375c:	2109      	movs	r1, #9
 800375e:	f7ff ff7d 	bl	800365c <std>
 8003762:	68e0      	ldr	r0, [r4, #12]
 8003764:	2202      	movs	r2, #2
 8003766:	2112      	movs	r1, #18
 8003768:	f7ff ff78 	bl	800365c <std>
 800376c:	2301      	movs	r3, #1
 800376e:	61a3      	str	r3, [r4, #24]
 8003770:	e7d2      	b.n	8003718 <__sinit+0xc>
 8003772:	bf00      	nop
 8003774:	08003b20 	.word	0x08003b20
 8003778:	080036a5 	.word	0x080036a5

0800377c <__sfp>:
 800377c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800377e:	4607      	mov	r7, r0
 8003780:	f7ff ffac 	bl	80036dc <__sfp_lock_acquire>
 8003784:	4b1e      	ldr	r3, [pc, #120]	; (8003800 <__sfp+0x84>)
 8003786:	681e      	ldr	r6, [r3, #0]
 8003788:	69b3      	ldr	r3, [r6, #24]
 800378a:	b913      	cbnz	r3, 8003792 <__sfp+0x16>
 800378c:	4630      	mov	r0, r6
 800378e:	f7ff ffbd 	bl	800370c <__sinit>
 8003792:	3648      	adds	r6, #72	; 0x48
 8003794:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003798:	3b01      	subs	r3, #1
 800379a:	d503      	bpl.n	80037a4 <__sfp+0x28>
 800379c:	6833      	ldr	r3, [r6, #0]
 800379e:	b30b      	cbz	r3, 80037e4 <__sfp+0x68>
 80037a0:	6836      	ldr	r6, [r6, #0]
 80037a2:	e7f7      	b.n	8003794 <__sfp+0x18>
 80037a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80037a8:	b9d5      	cbnz	r5, 80037e0 <__sfp+0x64>
 80037aa:	4b16      	ldr	r3, [pc, #88]	; (8003804 <__sfp+0x88>)
 80037ac:	60e3      	str	r3, [r4, #12]
 80037ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80037b2:	6665      	str	r5, [r4, #100]	; 0x64
 80037b4:	f000 f847 	bl	8003846 <__retarget_lock_init_recursive>
 80037b8:	f7ff ff96 	bl	80036e8 <__sfp_lock_release>
 80037bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80037c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80037c4:	6025      	str	r5, [r4, #0]
 80037c6:	61a5      	str	r5, [r4, #24]
 80037c8:	2208      	movs	r2, #8
 80037ca:	4629      	mov	r1, r5
 80037cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80037d0:	f7ff f900 	bl	80029d4 <memset>
 80037d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80037d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80037dc:	4620      	mov	r0, r4
 80037de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037e0:	3468      	adds	r4, #104	; 0x68
 80037e2:	e7d9      	b.n	8003798 <__sfp+0x1c>
 80037e4:	2104      	movs	r1, #4
 80037e6:	4638      	mov	r0, r7
 80037e8:	f7ff ff62 	bl	80036b0 <__sfmoreglue>
 80037ec:	4604      	mov	r4, r0
 80037ee:	6030      	str	r0, [r6, #0]
 80037f0:	2800      	cmp	r0, #0
 80037f2:	d1d5      	bne.n	80037a0 <__sfp+0x24>
 80037f4:	f7ff ff78 	bl	80036e8 <__sfp_lock_release>
 80037f8:	230c      	movs	r3, #12
 80037fa:	603b      	str	r3, [r7, #0]
 80037fc:	e7ee      	b.n	80037dc <__sfp+0x60>
 80037fe:	bf00      	nop
 8003800:	08003b20 	.word	0x08003b20
 8003804:	ffff0001 	.word	0xffff0001

08003808 <_fwalk_reent>:
 8003808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800380c:	4606      	mov	r6, r0
 800380e:	4688      	mov	r8, r1
 8003810:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003814:	2700      	movs	r7, #0
 8003816:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800381a:	f1b9 0901 	subs.w	r9, r9, #1
 800381e:	d505      	bpl.n	800382c <_fwalk_reent+0x24>
 8003820:	6824      	ldr	r4, [r4, #0]
 8003822:	2c00      	cmp	r4, #0
 8003824:	d1f7      	bne.n	8003816 <_fwalk_reent+0xe>
 8003826:	4638      	mov	r0, r7
 8003828:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800382c:	89ab      	ldrh	r3, [r5, #12]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d907      	bls.n	8003842 <_fwalk_reent+0x3a>
 8003832:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003836:	3301      	adds	r3, #1
 8003838:	d003      	beq.n	8003842 <_fwalk_reent+0x3a>
 800383a:	4629      	mov	r1, r5
 800383c:	4630      	mov	r0, r6
 800383e:	47c0      	blx	r8
 8003840:	4307      	orrs	r7, r0
 8003842:	3568      	adds	r5, #104	; 0x68
 8003844:	e7e9      	b.n	800381a <_fwalk_reent+0x12>

08003846 <__retarget_lock_init_recursive>:
 8003846:	4770      	bx	lr

08003848 <__retarget_lock_acquire_recursive>:
 8003848:	4770      	bx	lr

0800384a <__retarget_lock_release_recursive>:
 800384a:	4770      	bx	lr

0800384c <__swhatbuf_r>:
 800384c:	b570      	push	{r4, r5, r6, lr}
 800384e:	460e      	mov	r6, r1
 8003850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003854:	2900      	cmp	r1, #0
 8003856:	b096      	sub	sp, #88	; 0x58
 8003858:	4614      	mov	r4, r2
 800385a:	461d      	mov	r5, r3
 800385c:	da08      	bge.n	8003870 <__swhatbuf_r+0x24>
 800385e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	602a      	str	r2, [r5, #0]
 8003866:	061a      	lsls	r2, r3, #24
 8003868:	d410      	bmi.n	800388c <__swhatbuf_r+0x40>
 800386a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800386e:	e00e      	b.n	800388e <__swhatbuf_r+0x42>
 8003870:	466a      	mov	r2, sp
 8003872:	f000 f8fb 	bl	8003a6c <_fstat_r>
 8003876:	2800      	cmp	r0, #0
 8003878:	dbf1      	blt.n	800385e <__swhatbuf_r+0x12>
 800387a:	9a01      	ldr	r2, [sp, #4]
 800387c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003880:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003884:	425a      	negs	r2, r3
 8003886:	415a      	adcs	r2, r3
 8003888:	602a      	str	r2, [r5, #0]
 800388a:	e7ee      	b.n	800386a <__swhatbuf_r+0x1e>
 800388c:	2340      	movs	r3, #64	; 0x40
 800388e:	2000      	movs	r0, #0
 8003890:	6023      	str	r3, [r4, #0]
 8003892:	b016      	add	sp, #88	; 0x58
 8003894:	bd70      	pop	{r4, r5, r6, pc}
	...

08003898 <__smakebuf_r>:
 8003898:	898b      	ldrh	r3, [r1, #12]
 800389a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800389c:	079d      	lsls	r5, r3, #30
 800389e:	4606      	mov	r6, r0
 80038a0:	460c      	mov	r4, r1
 80038a2:	d507      	bpl.n	80038b4 <__smakebuf_r+0x1c>
 80038a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80038a8:	6023      	str	r3, [r4, #0]
 80038aa:	6123      	str	r3, [r4, #16]
 80038ac:	2301      	movs	r3, #1
 80038ae:	6163      	str	r3, [r4, #20]
 80038b0:	b002      	add	sp, #8
 80038b2:	bd70      	pop	{r4, r5, r6, pc}
 80038b4:	ab01      	add	r3, sp, #4
 80038b6:	466a      	mov	r2, sp
 80038b8:	f7ff ffc8 	bl	800384c <__swhatbuf_r>
 80038bc:	9900      	ldr	r1, [sp, #0]
 80038be:	4605      	mov	r5, r0
 80038c0:	4630      	mov	r0, r6
 80038c2:	f7ff f8fb 	bl	8002abc <_malloc_r>
 80038c6:	b948      	cbnz	r0, 80038dc <__smakebuf_r+0x44>
 80038c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038cc:	059a      	lsls	r2, r3, #22
 80038ce:	d4ef      	bmi.n	80038b0 <__smakebuf_r+0x18>
 80038d0:	f023 0303 	bic.w	r3, r3, #3
 80038d4:	f043 0302 	orr.w	r3, r3, #2
 80038d8:	81a3      	strh	r3, [r4, #12]
 80038da:	e7e3      	b.n	80038a4 <__smakebuf_r+0xc>
 80038dc:	4b0d      	ldr	r3, [pc, #52]	; (8003914 <__smakebuf_r+0x7c>)
 80038de:	62b3      	str	r3, [r6, #40]	; 0x28
 80038e0:	89a3      	ldrh	r3, [r4, #12]
 80038e2:	6020      	str	r0, [r4, #0]
 80038e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038e8:	81a3      	strh	r3, [r4, #12]
 80038ea:	9b00      	ldr	r3, [sp, #0]
 80038ec:	6163      	str	r3, [r4, #20]
 80038ee:	9b01      	ldr	r3, [sp, #4]
 80038f0:	6120      	str	r0, [r4, #16]
 80038f2:	b15b      	cbz	r3, 800390c <__smakebuf_r+0x74>
 80038f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038f8:	4630      	mov	r0, r6
 80038fa:	f000 f8c9 	bl	8003a90 <_isatty_r>
 80038fe:	b128      	cbz	r0, 800390c <__smakebuf_r+0x74>
 8003900:	89a3      	ldrh	r3, [r4, #12]
 8003902:	f023 0303 	bic.w	r3, r3, #3
 8003906:	f043 0301 	orr.w	r3, r3, #1
 800390a:	81a3      	strh	r3, [r4, #12]
 800390c:	89a0      	ldrh	r0, [r4, #12]
 800390e:	4305      	orrs	r5, r0
 8003910:	81a5      	strh	r5, [r4, #12]
 8003912:	e7cd      	b.n	80038b0 <__smakebuf_r+0x18>
 8003914:	080036a5 	.word	0x080036a5

08003918 <_raise_r>:
 8003918:	291f      	cmp	r1, #31
 800391a:	b538      	push	{r3, r4, r5, lr}
 800391c:	4604      	mov	r4, r0
 800391e:	460d      	mov	r5, r1
 8003920:	d904      	bls.n	800392c <_raise_r+0x14>
 8003922:	2316      	movs	r3, #22
 8003924:	6003      	str	r3, [r0, #0]
 8003926:	f04f 30ff 	mov.w	r0, #4294967295
 800392a:	bd38      	pop	{r3, r4, r5, pc}
 800392c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800392e:	b112      	cbz	r2, 8003936 <_raise_r+0x1e>
 8003930:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003934:	b94b      	cbnz	r3, 800394a <_raise_r+0x32>
 8003936:	4620      	mov	r0, r4
 8003938:	f000 f830 	bl	800399c <_getpid_r>
 800393c:	462a      	mov	r2, r5
 800393e:	4601      	mov	r1, r0
 8003940:	4620      	mov	r0, r4
 8003942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003946:	f000 b817 	b.w	8003978 <_kill_r>
 800394a:	2b01      	cmp	r3, #1
 800394c:	d00a      	beq.n	8003964 <_raise_r+0x4c>
 800394e:	1c59      	adds	r1, r3, #1
 8003950:	d103      	bne.n	800395a <_raise_r+0x42>
 8003952:	2316      	movs	r3, #22
 8003954:	6003      	str	r3, [r0, #0]
 8003956:	2001      	movs	r0, #1
 8003958:	e7e7      	b.n	800392a <_raise_r+0x12>
 800395a:	2400      	movs	r4, #0
 800395c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003960:	4628      	mov	r0, r5
 8003962:	4798      	blx	r3
 8003964:	2000      	movs	r0, #0
 8003966:	e7e0      	b.n	800392a <_raise_r+0x12>

08003968 <raise>:
 8003968:	4b02      	ldr	r3, [pc, #8]	; (8003974 <raise+0xc>)
 800396a:	4601      	mov	r1, r0
 800396c:	6818      	ldr	r0, [r3, #0]
 800396e:	f7ff bfd3 	b.w	8003918 <_raise_r>
 8003972:	bf00      	nop
 8003974:	20000004 	.word	0x20000004

08003978 <_kill_r>:
 8003978:	b538      	push	{r3, r4, r5, lr}
 800397a:	4d07      	ldr	r5, [pc, #28]	; (8003998 <_kill_r+0x20>)
 800397c:	2300      	movs	r3, #0
 800397e:	4604      	mov	r4, r0
 8003980:	4608      	mov	r0, r1
 8003982:	4611      	mov	r1, r2
 8003984:	602b      	str	r3, [r5, #0]
 8003986:	f7fd f9a7 	bl	8000cd8 <_kill>
 800398a:	1c43      	adds	r3, r0, #1
 800398c:	d102      	bne.n	8003994 <_kill_r+0x1c>
 800398e:	682b      	ldr	r3, [r5, #0]
 8003990:	b103      	cbz	r3, 8003994 <_kill_r+0x1c>
 8003992:	6023      	str	r3, [r4, #0]
 8003994:	bd38      	pop	{r3, r4, r5, pc}
 8003996:	bf00      	nop
 8003998:	20000398 	.word	0x20000398

0800399c <_getpid_r>:
 800399c:	f7fd b994 	b.w	8000cc8 <_getpid>

080039a0 <__sread>:
 80039a0:	b510      	push	{r4, lr}
 80039a2:	460c      	mov	r4, r1
 80039a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039a8:	f000 f894 	bl	8003ad4 <_read_r>
 80039ac:	2800      	cmp	r0, #0
 80039ae:	bfab      	itete	ge
 80039b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80039b2:	89a3      	ldrhlt	r3, [r4, #12]
 80039b4:	181b      	addge	r3, r3, r0
 80039b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80039ba:	bfac      	ite	ge
 80039bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80039be:	81a3      	strhlt	r3, [r4, #12]
 80039c0:	bd10      	pop	{r4, pc}

080039c2 <__swrite>:
 80039c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039c6:	461f      	mov	r7, r3
 80039c8:	898b      	ldrh	r3, [r1, #12]
 80039ca:	05db      	lsls	r3, r3, #23
 80039cc:	4605      	mov	r5, r0
 80039ce:	460c      	mov	r4, r1
 80039d0:	4616      	mov	r6, r2
 80039d2:	d505      	bpl.n	80039e0 <__swrite+0x1e>
 80039d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039d8:	2302      	movs	r3, #2
 80039da:	2200      	movs	r2, #0
 80039dc:	f000 f868 	bl	8003ab0 <_lseek_r>
 80039e0:	89a3      	ldrh	r3, [r4, #12]
 80039e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039ea:	81a3      	strh	r3, [r4, #12]
 80039ec:	4632      	mov	r2, r6
 80039ee:	463b      	mov	r3, r7
 80039f0:	4628      	mov	r0, r5
 80039f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039f6:	f000 b817 	b.w	8003a28 <_write_r>

080039fa <__sseek>:
 80039fa:	b510      	push	{r4, lr}
 80039fc:	460c      	mov	r4, r1
 80039fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a02:	f000 f855 	bl	8003ab0 <_lseek_r>
 8003a06:	1c43      	adds	r3, r0, #1
 8003a08:	89a3      	ldrh	r3, [r4, #12]
 8003a0a:	bf15      	itete	ne
 8003a0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003a0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003a12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003a16:	81a3      	strheq	r3, [r4, #12]
 8003a18:	bf18      	it	ne
 8003a1a:	81a3      	strhne	r3, [r4, #12]
 8003a1c:	bd10      	pop	{r4, pc}

08003a1e <__sclose>:
 8003a1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a22:	f000 b813 	b.w	8003a4c <_close_r>
	...

08003a28 <_write_r>:
 8003a28:	b538      	push	{r3, r4, r5, lr}
 8003a2a:	4d07      	ldr	r5, [pc, #28]	; (8003a48 <_write_r+0x20>)
 8003a2c:	4604      	mov	r4, r0
 8003a2e:	4608      	mov	r0, r1
 8003a30:	4611      	mov	r1, r2
 8003a32:	2200      	movs	r2, #0
 8003a34:	602a      	str	r2, [r5, #0]
 8003a36:	461a      	mov	r2, r3
 8003a38:	f7fd f985 	bl	8000d46 <_write>
 8003a3c:	1c43      	adds	r3, r0, #1
 8003a3e:	d102      	bne.n	8003a46 <_write_r+0x1e>
 8003a40:	682b      	ldr	r3, [r5, #0]
 8003a42:	b103      	cbz	r3, 8003a46 <_write_r+0x1e>
 8003a44:	6023      	str	r3, [r4, #0]
 8003a46:	bd38      	pop	{r3, r4, r5, pc}
 8003a48:	20000398 	.word	0x20000398

08003a4c <_close_r>:
 8003a4c:	b538      	push	{r3, r4, r5, lr}
 8003a4e:	4d06      	ldr	r5, [pc, #24]	; (8003a68 <_close_r+0x1c>)
 8003a50:	2300      	movs	r3, #0
 8003a52:	4604      	mov	r4, r0
 8003a54:	4608      	mov	r0, r1
 8003a56:	602b      	str	r3, [r5, #0]
 8003a58:	f7fd f991 	bl	8000d7e <_close>
 8003a5c:	1c43      	adds	r3, r0, #1
 8003a5e:	d102      	bne.n	8003a66 <_close_r+0x1a>
 8003a60:	682b      	ldr	r3, [r5, #0]
 8003a62:	b103      	cbz	r3, 8003a66 <_close_r+0x1a>
 8003a64:	6023      	str	r3, [r4, #0]
 8003a66:	bd38      	pop	{r3, r4, r5, pc}
 8003a68:	20000398 	.word	0x20000398

08003a6c <_fstat_r>:
 8003a6c:	b538      	push	{r3, r4, r5, lr}
 8003a6e:	4d07      	ldr	r5, [pc, #28]	; (8003a8c <_fstat_r+0x20>)
 8003a70:	2300      	movs	r3, #0
 8003a72:	4604      	mov	r4, r0
 8003a74:	4608      	mov	r0, r1
 8003a76:	4611      	mov	r1, r2
 8003a78:	602b      	str	r3, [r5, #0]
 8003a7a:	f7fd f98c 	bl	8000d96 <_fstat>
 8003a7e:	1c43      	adds	r3, r0, #1
 8003a80:	d102      	bne.n	8003a88 <_fstat_r+0x1c>
 8003a82:	682b      	ldr	r3, [r5, #0]
 8003a84:	b103      	cbz	r3, 8003a88 <_fstat_r+0x1c>
 8003a86:	6023      	str	r3, [r4, #0]
 8003a88:	bd38      	pop	{r3, r4, r5, pc}
 8003a8a:	bf00      	nop
 8003a8c:	20000398 	.word	0x20000398

08003a90 <_isatty_r>:
 8003a90:	b538      	push	{r3, r4, r5, lr}
 8003a92:	4d06      	ldr	r5, [pc, #24]	; (8003aac <_isatty_r+0x1c>)
 8003a94:	2300      	movs	r3, #0
 8003a96:	4604      	mov	r4, r0
 8003a98:	4608      	mov	r0, r1
 8003a9a:	602b      	str	r3, [r5, #0]
 8003a9c:	f7fd f98b 	bl	8000db6 <_isatty>
 8003aa0:	1c43      	adds	r3, r0, #1
 8003aa2:	d102      	bne.n	8003aaa <_isatty_r+0x1a>
 8003aa4:	682b      	ldr	r3, [r5, #0]
 8003aa6:	b103      	cbz	r3, 8003aaa <_isatty_r+0x1a>
 8003aa8:	6023      	str	r3, [r4, #0]
 8003aaa:	bd38      	pop	{r3, r4, r5, pc}
 8003aac:	20000398 	.word	0x20000398

08003ab0 <_lseek_r>:
 8003ab0:	b538      	push	{r3, r4, r5, lr}
 8003ab2:	4d07      	ldr	r5, [pc, #28]	; (8003ad0 <_lseek_r+0x20>)
 8003ab4:	4604      	mov	r4, r0
 8003ab6:	4608      	mov	r0, r1
 8003ab8:	4611      	mov	r1, r2
 8003aba:	2200      	movs	r2, #0
 8003abc:	602a      	str	r2, [r5, #0]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	f7fd f984 	bl	8000dcc <_lseek>
 8003ac4:	1c43      	adds	r3, r0, #1
 8003ac6:	d102      	bne.n	8003ace <_lseek_r+0x1e>
 8003ac8:	682b      	ldr	r3, [r5, #0]
 8003aca:	b103      	cbz	r3, 8003ace <_lseek_r+0x1e>
 8003acc:	6023      	str	r3, [r4, #0]
 8003ace:	bd38      	pop	{r3, r4, r5, pc}
 8003ad0:	20000398 	.word	0x20000398

08003ad4 <_read_r>:
 8003ad4:	b538      	push	{r3, r4, r5, lr}
 8003ad6:	4d07      	ldr	r5, [pc, #28]	; (8003af4 <_read_r+0x20>)
 8003ad8:	4604      	mov	r4, r0
 8003ada:	4608      	mov	r0, r1
 8003adc:	4611      	mov	r1, r2
 8003ade:	2200      	movs	r2, #0
 8003ae0:	602a      	str	r2, [r5, #0]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	f7fd f912 	bl	8000d0c <_read>
 8003ae8:	1c43      	adds	r3, r0, #1
 8003aea:	d102      	bne.n	8003af2 <_read_r+0x1e>
 8003aec:	682b      	ldr	r3, [r5, #0]
 8003aee:	b103      	cbz	r3, 8003af2 <_read_r+0x1e>
 8003af0:	6023      	str	r3, [r4, #0]
 8003af2:	bd38      	pop	{r3, r4, r5, pc}
 8003af4:	20000398 	.word	0x20000398

08003af8 <_gettimeofday>:
 8003af8:	4b02      	ldr	r3, [pc, #8]	; (8003b04 <_gettimeofday+0xc>)
 8003afa:	2258      	movs	r2, #88	; 0x58
 8003afc:	601a      	str	r2, [r3, #0]
 8003afe:	f04f 30ff 	mov.w	r0, #4294967295
 8003b02:	4770      	bx	lr
 8003b04:	20000398 	.word	0x20000398

08003b08 <_init>:
 8003b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b0a:	bf00      	nop
 8003b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b0e:	bc08      	pop	{r3}
 8003b10:	469e      	mov	lr, r3
 8003b12:	4770      	bx	lr

08003b14 <_fini>:
 8003b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b16:	bf00      	nop
 8003b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b1a:	bc08      	pop	{r3}
 8003b1c:	469e      	mov	lr, r3
 8003b1e:	4770      	bx	lr
